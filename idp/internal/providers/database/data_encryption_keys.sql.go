// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: data_encryption_keys.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createDataEncryptionKey = `-- name: CreateDataEncryptionKey :one

INSERT INTO "data_encryption_keys" (
    "kid",
    "dek",
    "kek_kid",
    "usage",
    "expires_at"
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING id, kid, dek, kek_kid, usage, is_revoked, expires_at, created_at, updated_at
`

type CreateDataEncryptionKeyParams struct {
	Kid       string
	Dek       string
	KekKid    uuid.UUID
	Usage     DekUsage
	ExpiresAt time.Time
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateDataEncryptionKey(ctx context.Context, arg CreateDataEncryptionKeyParams) (DataEncryptionKey, error) {
	row := q.db.QueryRow(ctx, createDataEncryptionKey,
		arg.Kid,
		arg.Dek,
		arg.KekKid,
		arg.Usage,
		arg.ExpiresAt,
	)
	var i DataEncryptionKey
	err := row.Scan(
		&i.ID,
		&i.Kid,
		&i.Dek,
		&i.KekKid,
		&i.Usage,
		&i.IsRevoked,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findDataEncryptionKeyByKID = `-- name: FindDataEncryptionKeyByKID :one
SELECT id, kid, dek, kek_kid, usage, is_revoked, expires_at, created_at, updated_at FROM "data_encryption_keys"
WHERE "kid" = $1
LIMIT 1
`

func (q *Queries) FindDataEncryptionKeyByKID(ctx context.Context, kid string) (DataEncryptionKey, error) {
	row := q.db.QueryRow(ctx, findDataEncryptionKeyByKID, kid)
	var i DataEncryptionKey
	err := row.Scan(
		&i.ID,
		&i.Kid,
		&i.Dek,
		&i.KekKid,
		&i.Usage,
		&i.IsRevoked,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findValidGlobalDataEncryptionKey = `-- name: FindValidGlobalDataEncryptionKey :one
SELECT id, kid, dek, kek_kid, usage, is_revoked, expires_at, created_at, updated_at FROM "data_encryption_keys"
WHERE
    "usage" = 'global' AND
    "is_revoked" = false AND
    "expires_at" > $1
ORDER BY "expires_at" DESC
LIMIT 1
`

func (q *Queries) FindValidGlobalDataEncryptionKey(ctx context.Context, expiresAt time.Time) (DataEncryptionKey, error) {
	row := q.db.QueryRow(ctx, findValidGlobalDataEncryptionKey, expiresAt)
	var i DataEncryptionKey
	err := row.Scan(
		&i.ID,
		&i.Kid,
		&i.Dek,
		&i.KekKid,
		&i.Usage,
		&i.IsRevoked,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const revokeDataEncryptionKey = `-- name: RevokeDataEncryptionKey :exec
UPDATE "data_encryption_keys" SET
    "is_revoked" = true
WHERE "id" = $1
`

func (q *Queries) RevokeDataEncryptionKey(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, revokeDataEncryptionKey, id)
	return err
}
