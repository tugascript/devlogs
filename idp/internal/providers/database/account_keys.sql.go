// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account_keys.sql

package database

import (
	"context"
)

const createAccountKeys = `-- name: CreateAccountKeys :one
INSERT INTO "account_keys" (
    "client_id",
    "client_secret",
    "account_id",
    "scopes"
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id, account_id, scopes, client_id, client_secret, created_at, updated_at
`

type CreateAccountKeysParams struct {
	ClientID     string
	ClientSecret string
	AccountID    int32
	Scopes       []string
}

func (q *Queries) CreateAccountKeys(ctx context.Context, arg CreateAccountKeysParams) (AccountKey, error) {
	row := q.db.QueryRow(ctx, createAccountKeys,
		arg.ClientID,
		arg.ClientSecret,
		arg.AccountID,
		arg.Scopes,
	)
	var i AccountKey
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Scopes,
		&i.ClientID,
		&i.ClientSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAccountKeysByClientID = `-- name: FindAccountKeysByClientID :one
SELECT id, account_id, scopes, client_id, client_secret, created_at, updated_at FROM "account_keys"
WHERE "client_id" = $1
LIMIT 1
`

func (q *Queries) FindAccountKeysByClientID(ctx context.Context, clientID string) (AccountKey, error) {
	row := q.db.QueryRow(ctx, findAccountKeysByClientID, clientID)
	var i AccountKey
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Scopes,
		&i.ClientID,
		&i.ClientSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
