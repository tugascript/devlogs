// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account_keys.sql

package database

import (
	"context"
)

const countAccountKeysByAccountID = `-- name: CountAccountKeysByAccountID :one
SELECT COUNT("id") FROM "account_keys"
WHERE "account_id" = $1
LIMIT 1
`

func (q *Queries) CountAccountKeysByAccountID(ctx context.Context, accountID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countAccountKeysByAccountID, accountID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAccountKeys = `-- name: CreateAccountKeys :one
INSERT INTO "account_keys" (
    "client_id",
    "client_secret",
    "account_id",
    "scopes"
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id, account_id, scopes, client_id, client_secret, created_at, updated_at
`

type CreateAccountKeysParams struct {
	ClientID     string
	ClientSecret string
	AccountID    int32
	Scopes       []byte
}

func (q *Queries) CreateAccountKeys(ctx context.Context, arg CreateAccountKeysParams) (AccountKey, error) {
	row := q.db.QueryRow(ctx, createAccountKeys,
		arg.ClientID,
		arg.ClientSecret,
		arg.AccountID,
		arg.Scopes,
	)
	var i AccountKey
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Scopes,
		&i.ClientID,
		&i.ClientSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccountKeys = `-- name: DeleteAccountKeys :exec
DELETE FROM "account_keys"
WHERE "client_id" = $1
`

func (q *Queries) DeleteAccountKeys(ctx context.Context, clientID string) error {
	_, err := q.db.Exec(ctx, deleteAccountKeys, clientID)
	return err
}

const findAccountKeysByClientID = `-- name: FindAccountKeysByClientID :one
SELECT id, account_id, scopes, client_id, client_secret, created_at, updated_at FROM "account_keys"
WHERE "client_id" = $1
LIMIT 1
`

func (q *Queries) FindAccountKeysByClientID(ctx context.Context, clientID string) (AccountKey, error) {
	row := q.db.QueryRow(ctx, findAccountKeysByClientID, clientID)
	var i AccountKey
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Scopes,
		&i.ClientID,
		&i.ClientSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findPaginatedAccountKeysByAccountID = `-- name: FindPaginatedAccountKeysByAccountID :many
SELECT id, account_id, scopes, client_id, client_secret, created_at, updated_at FROM "account_keys"
WHERE "account_id" = $1
ORDER BY "id" DESC
OFFSET $2 LIMIT $3
`

type FindPaginatedAccountKeysByAccountIDParams struct {
	AccountID int32
	Offset    int32
	Limit     int32
}

func (q *Queries) FindPaginatedAccountKeysByAccountID(ctx context.Context, arg FindPaginatedAccountKeysByAccountIDParams) ([]AccountKey, error) {
	rows, err := q.db.Query(ctx, findPaginatedAccountKeysByAccountID, arg.AccountID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AccountKey{}
	for rows.Next() {
		var i AccountKey
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Scopes,
			&i.ClientID,
			&i.ClientSecret,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountKeysClientSecret = `-- name: UpdateAccountKeysClientSecret :one
UPDATE "account_keys" SET
    "client_secret" = $1,
    "updated_at" = now()
WHERE "client_id" = $2
RETURNING id, account_id, scopes, client_id, client_secret, created_at, updated_at
`

type UpdateAccountKeysClientSecretParams struct {
	ClientSecret string
	ClientID     string
}

func (q *Queries) UpdateAccountKeysClientSecret(ctx context.Context, arg UpdateAccountKeysClientSecretParams) (AccountKey, error) {
	row := q.db.QueryRow(ctx, updateAccountKeysClientSecret, arg.ClientSecret, arg.ClientID)
	var i AccountKey
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Scopes,
		&i.ClientID,
		&i.ClientSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAccountKeysScope = `-- name: UpdateAccountKeysScope :one
UPDATE "account_keys" SET
    "scopes" = $1,
    "updated_at" = now()
WHERE "client_id" = $2
RETURNING id, account_id, scopes, client_id, client_secret, created_at, updated_at
`

type UpdateAccountKeysScopeParams struct {
	Scopes   []byte
	ClientID string
}

func (q *Queries) UpdateAccountKeysScope(ctx context.Context, arg UpdateAccountKeysScopeParams) (AccountKey, error) {
	row := q.db.QueryRow(ctx, updateAccountKeysScope, arg.Scopes, arg.ClientID)
	var i AccountKey
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Scopes,
		&i.ClientID,
		&i.ClientSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
