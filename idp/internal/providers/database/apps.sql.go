// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: apps.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countAppsByAccountIDAndName = `-- name: CountAppsByAccountIDAndName :one
SELECT COUNT(*) FROM "apps"
WHERE "account_id" = $1 AND "name" = $2
LIMIT 1
`

type CountAppsByAccountIDAndNameParams struct {
	AccountID int32
	Name      string
}

func (q *Queries) CountAppsByAccountIDAndName(ctx context.Context, arg CountAppsByAccountIDAndNameParams) (int64, error) {
	row := q.db.QueryRow(ctx, countAppsByAccountIDAndName, arg.AccountID, arg.Name)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAppsByAccountPublicID = `-- name: CountAppsByAccountPublicID :one
SELECT COUNT(*) FROM "apps"
WHERE "account_public_id" = $1
LIMIT 1
`

func (q *Queries) CountAppsByAccountPublicID(ctx context.Context, accountPublicID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countAppsByAccountPublicID, accountPublicID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countFilteredAppsByNameAndByAccountPublicID = `-- name: CountFilteredAppsByNameAndByAccountPublicID :one
SELECT COUNT(*) FROM "apps"
WHERE "account_public_id" = $1 AND "name" ILIKE $2
LIMIT 1
`

type CountFilteredAppsByNameAndByAccountPublicIDParams struct {
	AccountPublicID uuid.UUID
	Name            string
}

func (q *Queries) CountFilteredAppsByNameAndByAccountPublicID(ctx context.Context, arg CountFilteredAppsByNameAndByAccountPublicIDParams) (int64, error) {
	row := q.db.QueryRow(ctx, countFilteredAppsByNameAndByAccountPublicID, arg.AccountPublicID, arg.Name)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countFilteredAppsByNameAndTypeAndByAccountPublicID = `-- name: CountFilteredAppsByNameAndTypeAndByAccountPublicID :one
SELECT COUNT(*) FROM "apps"
WHERE "account_public_id" = $1 AND
  "name" ILIKE $2 AND
  "app_type" = $3
LIMIT 1
`

type CountFilteredAppsByNameAndTypeAndByAccountPublicIDParams struct {
	AccountPublicID uuid.UUID
	Name            string
	AppType         AppType
}

func (q *Queries) CountFilteredAppsByNameAndTypeAndByAccountPublicID(ctx context.Context, arg CountFilteredAppsByNameAndTypeAndByAccountPublicIDParams) (int64, error) {
	row := q.db.QueryRow(ctx, countFilteredAppsByNameAndTypeAndByAccountPublicID, arg.AccountPublicID, arg.Name, arg.AppType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countFilteredAppsByTypeAndByAccountPublicID = `-- name: CountFilteredAppsByTypeAndByAccountPublicID :one
SELECT COUNT(*) FROM "apps"
WHERE "account_public_id" = $1 AND "app_type" = $2
LIMIT 1
`

type CountFilteredAppsByTypeAndByAccountPublicIDParams struct {
	AccountPublicID uuid.UUID
	AppType         AppType
}

func (q *Queries) CountFilteredAppsByTypeAndByAccountPublicID(ctx context.Context, arg CountFilteredAppsByTypeAndByAccountPublicIDParams) (int64, error) {
	row := q.db.QueryRow(ctx, countFilteredAppsByTypeAndByAccountPublicID, arg.AccountPublicID, arg.AppType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createApp = `-- name: CreateApp :one

INSERT INTO "apps" (
  "account_id",
  "account_public_id",
  "app_type",
  "name",
  "client_id",
  "client_uri",
  "username_column",
  "token_endpoint_auth_method",
  "creation_method",
  "grant_types",
  "logo_uri",
  "tos_uri",
  "policy_uri",
  "contacts",
  "software_id",
  "software_version",
  "scopes",
  "default_scopes",
  "custom_scopes",
  "default_custom_scopes",
  "domain",
  "transport",
  "redirect_uris",
  "response_types",
  "allow_user_registration",
  "auth_providers"
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9,
  $10,
  $11,
  $12,
  $13,
  $14,
  $15,
  $16,
  $17,
  $18,
  $19,
  $20,
  $21,
  $22,
  $23,
  $24,
  $25,
  $26
) RETURNING id, account_id, account_public_id, app_type, name, client_id, version, creation_method, client_uri, logo_uri, tos_uri, policy_uri, software_id, software_version, contacts, token_endpoint_auth_method, scopes, custom_scopes, grant_types, domain, transport, allow_user_registration, auth_providers, username_column, default_scopes, default_custom_scopes, redirect_uris, response_types, id_token_ttl, token_ttl, refresh_token_ttl, created_at, updated_at
`

type CreateAppParams struct {
	AccountID               int32
	AccountPublicID         uuid.UUID
	AppType                 AppType
	Name                    string
	ClientID                string
	ClientUri               string
	UsernameColumn          AppUsernameColumn
	TokenEndpointAuthMethod AuthMethod
	CreationMethod          CreationMethod
	GrantTypes              []GrantType
	LogoUri                 pgtype.Text
	TosUri                  pgtype.Text
	PolicyUri               pgtype.Text
	Contacts                []string
	SoftwareID              string
	SoftwareVersion         pgtype.Text
	Scopes                  []Scopes
	DefaultScopes           []Scopes
	CustomScopes            []string
	DefaultCustomScopes     []string
	Domain                  string
	Transport               Transport
	RedirectUris            []string
	ResponseTypes           []ResponseType
	AllowUserRegistration   bool
	AuthProviders           []AuthProvider
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateApp(ctx context.Context, arg CreateAppParams) (App, error) {
	row := q.db.QueryRow(ctx, createApp,
		arg.AccountID,
		arg.AccountPublicID,
		arg.AppType,
		arg.Name,
		arg.ClientID,
		arg.ClientUri,
		arg.UsernameColumn,
		arg.TokenEndpointAuthMethod,
		arg.CreationMethod,
		arg.GrantTypes,
		arg.LogoUri,
		arg.TosUri,
		arg.PolicyUri,
		arg.Contacts,
		arg.SoftwareID,
		arg.SoftwareVersion,
		arg.Scopes,
		arg.DefaultScopes,
		arg.CustomScopes,
		arg.DefaultCustomScopes,
		arg.Domain,
		arg.Transport,
		arg.RedirectUris,
		arg.ResponseTypes,
		arg.AllowUserRegistration,
		arg.AuthProviders,
	)
	var i App
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountPublicID,
		&i.AppType,
		&i.Name,
		&i.ClientID,
		&i.Version,
		&i.CreationMethod,
		&i.ClientUri,
		&i.LogoUri,
		&i.TosUri,
		&i.PolicyUri,
		&i.SoftwareID,
		&i.SoftwareVersion,
		&i.Contacts,
		&i.TokenEndpointAuthMethod,
		&i.Scopes,
		&i.CustomScopes,
		&i.GrantTypes,
		&i.Domain,
		&i.Transport,
		&i.AllowUserRegistration,
		&i.AuthProviders,
		&i.UsernameColumn,
		&i.DefaultScopes,
		&i.DefaultCustomScopes,
		&i.RedirectUris,
		&i.ResponseTypes,
		&i.IDTokenTtl,
		&i.TokenTtl,
		&i.RefreshTokenTtl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllApps = `-- name: DeleteAllApps :exec
DELETE FROM "apps"
`

func (q *Queries) DeleteAllApps(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllApps)
	return err
}

const deleteApp = `-- name: DeleteApp :exec
DELETE FROM "apps"
WHERE "id" = $1
`

func (q *Queries) DeleteApp(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteApp, id)
	return err
}

const filterAppsByNameAndByAccountPublicIDOrderedByID = `-- name: FilterAppsByNameAndByAccountPublicIDOrderedByID :many
SELECT id, account_id, account_public_id, app_type, name, client_id, version, creation_method, client_uri, logo_uri, tos_uri, policy_uri, software_id, software_version, contacts, token_endpoint_auth_method, scopes, custom_scopes, grant_types, domain, transport, allow_user_registration, auth_providers, username_column, default_scopes, default_custom_scopes, redirect_uris, response_types, id_token_ttl, token_ttl, refresh_token_ttl, created_at, updated_at FROM "apps"
WHERE "account_public_id" = $1 AND "name" ILIKE $2
ORDER BY "id" DESC
OFFSET $3 LIMIT $4
`

type FilterAppsByNameAndByAccountPublicIDOrderedByIDParams struct {
	AccountPublicID uuid.UUID
	Name            string
	Offset          int32
	Limit           int32
}

func (q *Queries) FilterAppsByNameAndByAccountPublicIDOrderedByID(ctx context.Context, arg FilterAppsByNameAndByAccountPublicIDOrderedByIDParams) ([]App, error) {
	rows, err := q.db.Query(ctx, filterAppsByNameAndByAccountPublicIDOrderedByID,
		arg.AccountPublicID,
		arg.Name,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []App{}
	for rows.Next() {
		var i App
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.AccountPublicID,
			&i.AppType,
			&i.Name,
			&i.ClientID,
			&i.Version,
			&i.CreationMethod,
			&i.ClientUri,
			&i.LogoUri,
			&i.TosUri,
			&i.PolicyUri,
			&i.SoftwareID,
			&i.SoftwareVersion,
			&i.Contacts,
			&i.TokenEndpointAuthMethod,
			&i.Scopes,
			&i.CustomScopes,
			&i.GrantTypes,
			&i.Domain,
			&i.Transport,
			&i.AllowUserRegistration,
			&i.AuthProviders,
			&i.UsernameColumn,
			&i.DefaultScopes,
			&i.DefaultCustomScopes,
			&i.RedirectUris,
			&i.ResponseTypes,
			&i.IDTokenTtl,
			&i.TokenTtl,
			&i.RefreshTokenTtl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filterAppsByNameAndByAccountPublicIDOrderedByName = `-- name: FilterAppsByNameAndByAccountPublicIDOrderedByName :many
SELECT id, account_id, account_public_id, app_type, name, client_id, version, creation_method, client_uri, logo_uri, tos_uri, policy_uri, software_id, software_version, contacts, token_endpoint_auth_method, scopes, custom_scopes, grant_types, domain, transport, allow_user_registration, auth_providers, username_column, default_scopes, default_custom_scopes, redirect_uris, response_types, id_token_ttl, token_ttl, refresh_token_ttl, created_at, updated_at FROM "apps"
WHERE "account_public_id" = $1 AND "name" ILIKE $2
ORDER BY "name" ASC
OFFSET $3 LIMIT $4
`

type FilterAppsByNameAndByAccountPublicIDOrderedByNameParams struct {
	AccountPublicID uuid.UUID
	Name            string
	Offset          int32
	Limit           int32
}

func (q *Queries) FilterAppsByNameAndByAccountPublicIDOrderedByName(ctx context.Context, arg FilterAppsByNameAndByAccountPublicIDOrderedByNameParams) ([]App, error) {
	rows, err := q.db.Query(ctx, filterAppsByNameAndByAccountPublicIDOrderedByName,
		arg.AccountPublicID,
		arg.Name,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []App{}
	for rows.Next() {
		var i App
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.AccountPublicID,
			&i.AppType,
			&i.Name,
			&i.ClientID,
			&i.Version,
			&i.CreationMethod,
			&i.ClientUri,
			&i.LogoUri,
			&i.TosUri,
			&i.PolicyUri,
			&i.SoftwareID,
			&i.SoftwareVersion,
			&i.Contacts,
			&i.TokenEndpointAuthMethod,
			&i.Scopes,
			&i.CustomScopes,
			&i.GrantTypes,
			&i.Domain,
			&i.Transport,
			&i.AllowUserRegistration,
			&i.AuthProviders,
			&i.UsernameColumn,
			&i.DefaultScopes,
			&i.DefaultCustomScopes,
			&i.RedirectUris,
			&i.ResponseTypes,
			&i.IDTokenTtl,
			&i.TokenTtl,
			&i.RefreshTokenTtl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filterAppsByNameAndTypeAndByAccountPublicIDOrderedByID = `-- name: FilterAppsByNameAndTypeAndByAccountPublicIDOrderedByID :many
SELECT id, account_id, account_public_id, app_type, name, client_id, version, creation_method, client_uri, logo_uri, tos_uri, policy_uri, software_id, software_version, contacts, token_endpoint_auth_method, scopes, custom_scopes, grant_types, domain, transport, allow_user_registration, auth_providers, username_column, default_scopes, default_custom_scopes, redirect_uris, response_types, id_token_ttl, token_ttl, refresh_token_ttl, created_at, updated_at FROM "apps"
WHERE "account_public_id" = $1 AND
  "name" ILIKE $2 AND
  "app_type" = $3
ORDER BY "id" DESC
OFFSET $4 LIMIT $5
`

type FilterAppsByNameAndTypeAndByAccountPublicIDOrderedByIDParams struct {
	AccountPublicID uuid.UUID
	Name            string
	AppType         AppType
	Offset          int32
	Limit           int32
}

func (q *Queries) FilterAppsByNameAndTypeAndByAccountPublicIDOrderedByID(ctx context.Context, arg FilterAppsByNameAndTypeAndByAccountPublicIDOrderedByIDParams) ([]App, error) {
	rows, err := q.db.Query(ctx, filterAppsByNameAndTypeAndByAccountPublicIDOrderedByID,
		arg.AccountPublicID,
		arg.Name,
		arg.AppType,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []App{}
	for rows.Next() {
		var i App
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.AccountPublicID,
			&i.AppType,
			&i.Name,
			&i.ClientID,
			&i.Version,
			&i.CreationMethod,
			&i.ClientUri,
			&i.LogoUri,
			&i.TosUri,
			&i.PolicyUri,
			&i.SoftwareID,
			&i.SoftwareVersion,
			&i.Contacts,
			&i.TokenEndpointAuthMethod,
			&i.Scopes,
			&i.CustomScopes,
			&i.GrantTypes,
			&i.Domain,
			&i.Transport,
			&i.AllowUserRegistration,
			&i.AuthProviders,
			&i.UsernameColumn,
			&i.DefaultScopes,
			&i.DefaultCustomScopes,
			&i.RedirectUris,
			&i.ResponseTypes,
			&i.IDTokenTtl,
			&i.TokenTtl,
			&i.RefreshTokenTtl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filterAppsByNameAndTypeAndByAccountPublicIDOrderedByName = `-- name: FilterAppsByNameAndTypeAndByAccountPublicIDOrderedByName :many
SELECT id, account_id, account_public_id, app_type, name, client_id, version, creation_method, client_uri, logo_uri, tos_uri, policy_uri, software_id, software_version, contacts, token_endpoint_auth_method, scopes, custom_scopes, grant_types, domain, transport, allow_user_registration, auth_providers, username_column, default_scopes, default_custom_scopes, redirect_uris, response_types, id_token_ttl, token_ttl, refresh_token_ttl, created_at, updated_at FROM "apps"
WHERE "account_public_id" = $1 AND
  "name" ILIKE $2 AND
  "app_type" = $3
ORDER BY "name" ASC
OFFSET $4 LIMIT $5
`

type FilterAppsByNameAndTypeAndByAccountPublicIDOrderedByNameParams struct {
	AccountPublicID uuid.UUID
	Name            string
	AppType         AppType
	Offset          int32
	Limit           int32
}

func (q *Queries) FilterAppsByNameAndTypeAndByAccountPublicIDOrderedByName(ctx context.Context, arg FilterAppsByNameAndTypeAndByAccountPublicIDOrderedByNameParams) ([]App, error) {
	rows, err := q.db.Query(ctx, filterAppsByNameAndTypeAndByAccountPublicIDOrderedByName,
		arg.AccountPublicID,
		arg.Name,
		arg.AppType,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []App{}
	for rows.Next() {
		var i App
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.AccountPublicID,
			&i.AppType,
			&i.Name,
			&i.ClientID,
			&i.Version,
			&i.CreationMethod,
			&i.ClientUri,
			&i.LogoUri,
			&i.TosUri,
			&i.PolicyUri,
			&i.SoftwareID,
			&i.SoftwareVersion,
			&i.Contacts,
			&i.TokenEndpointAuthMethod,
			&i.Scopes,
			&i.CustomScopes,
			&i.GrantTypes,
			&i.Domain,
			&i.Transport,
			&i.AllowUserRegistration,
			&i.AuthProviders,
			&i.UsernameColumn,
			&i.DefaultScopes,
			&i.DefaultCustomScopes,
			&i.RedirectUris,
			&i.ResponseTypes,
			&i.IDTokenTtl,
			&i.TokenTtl,
			&i.RefreshTokenTtl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filterAppsByTypeAndByAccountPublicIDOrderedByID = `-- name: FilterAppsByTypeAndByAccountPublicIDOrderedByID :many
SELECT id, account_id, account_public_id, app_type, name, client_id, version, creation_method, client_uri, logo_uri, tos_uri, policy_uri, software_id, software_version, contacts, token_endpoint_auth_method, scopes, custom_scopes, grant_types, domain, transport, allow_user_registration, auth_providers, username_column, default_scopes, default_custom_scopes, redirect_uris, response_types, id_token_ttl, token_ttl, refresh_token_ttl, created_at, updated_at FROM "apps"
WHERE "account_public_id" = $1 AND "app_type" = $2
ORDER BY "id" DESC
OFFSET $3 LIMIT $4
`

type FilterAppsByTypeAndByAccountPublicIDOrderedByIDParams struct {
	AccountPublicID uuid.UUID
	AppType         AppType
	Offset          int32
	Limit           int32
}

func (q *Queries) FilterAppsByTypeAndByAccountPublicIDOrderedByID(ctx context.Context, arg FilterAppsByTypeAndByAccountPublicIDOrderedByIDParams) ([]App, error) {
	rows, err := q.db.Query(ctx, filterAppsByTypeAndByAccountPublicIDOrderedByID,
		arg.AccountPublicID,
		arg.AppType,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []App{}
	for rows.Next() {
		var i App
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.AccountPublicID,
			&i.AppType,
			&i.Name,
			&i.ClientID,
			&i.Version,
			&i.CreationMethod,
			&i.ClientUri,
			&i.LogoUri,
			&i.TosUri,
			&i.PolicyUri,
			&i.SoftwareID,
			&i.SoftwareVersion,
			&i.Contacts,
			&i.TokenEndpointAuthMethod,
			&i.Scopes,
			&i.CustomScopes,
			&i.GrantTypes,
			&i.Domain,
			&i.Transport,
			&i.AllowUserRegistration,
			&i.AuthProviders,
			&i.UsernameColumn,
			&i.DefaultScopes,
			&i.DefaultCustomScopes,
			&i.RedirectUris,
			&i.ResponseTypes,
			&i.IDTokenTtl,
			&i.TokenTtl,
			&i.RefreshTokenTtl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filterAppsByTypeAndByAccountPublicIDOrderedByName = `-- name: FilterAppsByTypeAndByAccountPublicIDOrderedByName :many
SELECT id, account_id, account_public_id, app_type, name, client_id, version, creation_method, client_uri, logo_uri, tos_uri, policy_uri, software_id, software_version, contacts, token_endpoint_auth_method, scopes, custom_scopes, grant_types, domain, transport, allow_user_registration, auth_providers, username_column, default_scopes, default_custom_scopes, redirect_uris, response_types, id_token_ttl, token_ttl, refresh_token_ttl, created_at, updated_at FROM "apps"
WHERE "account_public_id" = $1 AND "app_type" = $2
ORDER BY "name" ASC
OFFSET $3 LIMIT $4
`

type FilterAppsByTypeAndByAccountPublicIDOrderedByNameParams struct {
	AccountPublicID uuid.UUID
	AppType         AppType
	Offset          int32
	Limit           int32
}

func (q *Queries) FilterAppsByTypeAndByAccountPublicIDOrderedByName(ctx context.Context, arg FilterAppsByTypeAndByAccountPublicIDOrderedByNameParams) ([]App, error) {
	rows, err := q.db.Query(ctx, filterAppsByTypeAndByAccountPublicIDOrderedByName,
		arg.AccountPublicID,
		arg.AppType,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []App{}
	for rows.Next() {
		var i App
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.AccountPublicID,
			&i.AppType,
			&i.Name,
			&i.ClientID,
			&i.Version,
			&i.CreationMethod,
			&i.ClientUri,
			&i.LogoUri,
			&i.TosUri,
			&i.PolicyUri,
			&i.SoftwareID,
			&i.SoftwareVersion,
			&i.Contacts,
			&i.TokenEndpointAuthMethod,
			&i.Scopes,
			&i.CustomScopes,
			&i.GrantTypes,
			&i.Domain,
			&i.Transport,
			&i.AllowUserRegistration,
			&i.AuthProviders,
			&i.UsernameColumn,
			&i.DefaultScopes,
			&i.DefaultCustomScopes,
			&i.RedirectUris,
			&i.ResponseTypes,
			&i.IDTokenTtl,
			&i.TokenTtl,
			&i.RefreshTokenTtl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAppByClientID = `-- name: FindAppByClientID :one
SELECT id, account_id, account_public_id, app_type, name, client_id, version, creation_method, client_uri, logo_uri, tos_uri, policy_uri, software_id, software_version, contacts, token_endpoint_auth_method, scopes, custom_scopes, grant_types, domain, transport, allow_user_registration, auth_providers, username_column, default_scopes, default_custom_scopes, redirect_uris, response_types, id_token_ttl, token_ttl, refresh_token_ttl, created_at, updated_at FROM "apps"
WHERE "client_id" = $1 LIMIT 1
`

func (q *Queries) FindAppByClientID(ctx context.Context, clientID string) (App, error) {
	row := q.db.QueryRow(ctx, findAppByClientID, clientID)
	var i App
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountPublicID,
		&i.AppType,
		&i.Name,
		&i.ClientID,
		&i.Version,
		&i.CreationMethod,
		&i.ClientUri,
		&i.LogoUri,
		&i.TosUri,
		&i.PolicyUri,
		&i.SoftwareID,
		&i.SoftwareVersion,
		&i.Contacts,
		&i.TokenEndpointAuthMethod,
		&i.Scopes,
		&i.CustomScopes,
		&i.GrantTypes,
		&i.Domain,
		&i.Transport,
		&i.AllowUserRegistration,
		&i.AuthProviders,
		&i.UsernameColumn,
		&i.DefaultScopes,
		&i.DefaultCustomScopes,
		&i.RedirectUris,
		&i.ResponseTypes,
		&i.IDTokenTtl,
		&i.TokenTtl,
		&i.RefreshTokenTtl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAppByClientIDAndAccountPublicID = `-- name: FindAppByClientIDAndAccountPublicID :one
SELECT id, account_id, account_public_id, app_type, name, client_id, version, creation_method, client_uri, logo_uri, tos_uri, policy_uri, software_id, software_version, contacts, token_endpoint_auth_method, scopes, custom_scopes, grant_types, domain, transport, allow_user_registration, auth_providers, username_column, default_scopes, default_custom_scopes, redirect_uris, response_types, id_token_ttl, token_ttl, refresh_token_ttl, created_at, updated_at FROM "apps"
WHERE "client_id" = $1 AND "account_public_id" = $2
LIMIT 1
`

type FindAppByClientIDAndAccountPublicIDParams struct {
	ClientID        string
	AccountPublicID uuid.UUID
}

func (q *Queries) FindAppByClientIDAndAccountPublicID(ctx context.Context, arg FindAppByClientIDAndAccountPublicIDParams) (App, error) {
	row := q.db.QueryRow(ctx, findAppByClientIDAndAccountPublicID, arg.ClientID, arg.AccountPublicID)
	var i App
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountPublicID,
		&i.AppType,
		&i.Name,
		&i.ClientID,
		&i.Version,
		&i.CreationMethod,
		&i.ClientUri,
		&i.LogoUri,
		&i.TosUri,
		&i.PolicyUri,
		&i.SoftwareID,
		&i.SoftwareVersion,
		&i.Contacts,
		&i.TokenEndpointAuthMethod,
		&i.Scopes,
		&i.CustomScopes,
		&i.GrantTypes,
		&i.Domain,
		&i.Transport,
		&i.AllowUserRegistration,
		&i.AuthProviders,
		&i.UsernameColumn,
		&i.DefaultScopes,
		&i.DefaultCustomScopes,
		&i.RedirectUris,
		&i.ResponseTypes,
		&i.IDTokenTtl,
		&i.TokenTtl,
		&i.RefreshTokenTtl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAppByClientIDAndVersion = `-- name: FindAppByClientIDAndVersion :one
SELECT id, account_id, account_public_id, app_type, name, client_id, version, creation_method, client_uri, logo_uri, tos_uri, policy_uri, software_id, software_version, contacts, token_endpoint_auth_method, scopes, custom_scopes, grant_types, domain, transport, allow_user_registration, auth_providers, username_column, default_scopes, default_custom_scopes, redirect_uris, response_types, id_token_ttl, token_ttl, refresh_token_ttl, created_at, updated_at FROM "apps"
WHERE "client_id" = $1 AND "version" = $2 LIMIT 1
`

type FindAppByClientIDAndVersionParams struct {
	ClientID string
	Version  int32
}

func (q *Queries) FindAppByClientIDAndVersion(ctx context.Context, arg FindAppByClientIDAndVersionParams) (App, error) {
	row := q.db.QueryRow(ctx, findAppByClientIDAndVersion, arg.ClientID, arg.Version)
	var i App
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountPublicID,
		&i.AppType,
		&i.Name,
		&i.ClientID,
		&i.Version,
		&i.CreationMethod,
		&i.ClientUri,
		&i.LogoUri,
		&i.TosUri,
		&i.PolicyUri,
		&i.SoftwareID,
		&i.SoftwareVersion,
		&i.Contacts,
		&i.TokenEndpointAuthMethod,
		&i.Scopes,
		&i.CustomScopes,
		&i.GrantTypes,
		&i.Domain,
		&i.Transport,
		&i.AllowUserRegistration,
		&i.AuthProviders,
		&i.UsernameColumn,
		&i.DefaultScopes,
		&i.DefaultCustomScopes,
		&i.RedirectUris,
		&i.ResponseTypes,
		&i.IDTokenTtl,
		&i.TokenTtl,
		&i.RefreshTokenTtl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAppByID = `-- name: FindAppByID :one
SELECT id, account_id, account_public_id, app_type, name, client_id, version, creation_method, client_uri, logo_uri, tos_uri, policy_uri, software_id, software_version, contacts, token_endpoint_auth_method, scopes, custom_scopes, grant_types, domain, transport, allow_user_registration, auth_providers, username_column, default_scopes, default_custom_scopes, redirect_uris, response_types, id_token_ttl, token_ttl, refresh_token_ttl, created_at, updated_at FROM "apps"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) FindAppByID(ctx context.Context, id int32) (App, error) {
	row := q.db.QueryRow(ctx, findAppByID, id)
	var i App
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountPublicID,
		&i.AppType,
		&i.Name,
		&i.ClientID,
		&i.Version,
		&i.CreationMethod,
		&i.ClientUri,
		&i.LogoUri,
		&i.TosUri,
		&i.PolicyUri,
		&i.SoftwareID,
		&i.SoftwareVersion,
		&i.Contacts,
		&i.TokenEndpointAuthMethod,
		&i.Scopes,
		&i.CustomScopes,
		&i.GrantTypes,
		&i.Domain,
		&i.Transport,
		&i.AllowUserRegistration,
		&i.AuthProviders,
		&i.UsernameColumn,
		&i.DefaultScopes,
		&i.DefaultCustomScopes,
		&i.RedirectUris,
		&i.ResponseTypes,
		&i.IDTokenTtl,
		&i.TokenTtl,
		&i.RefreshTokenTtl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAppsByClientIDsAndAccountID = `-- name: FindAppsByClientIDsAndAccountID :many
SELECT id, account_id, account_public_id, app_type, name, client_id, version, creation_method, client_uri, logo_uri, tos_uri, policy_uri, software_id, software_version, contacts, token_endpoint_auth_method, scopes, custom_scopes, grant_types, domain, transport, allow_user_registration, auth_providers, username_column, default_scopes, default_custom_scopes, redirect_uris, response_types, id_token_ttl, token_ttl, refresh_token_ttl, created_at, updated_at FROM "apps"
WHERE "client_id" IN ($3) AND "account_id" = $1
ORDER BY "name" ASC LIMIT $2
`

type FindAppsByClientIDsAndAccountIDParams struct {
	AccountID int32
	Limit     int32
	ClientIds []string
}

func (q *Queries) FindAppsByClientIDsAndAccountID(ctx context.Context, arg FindAppsByClientIDsAndAccountIDParams) ([]App, error) {
	rows, err := q.db.Query(ctx, findAppsByClientIDsAndAccountID, arg.AccountID, arg.Limit, arg.ClientIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []App{}
	for rows.Next() {
		var i App
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.AccountPublicID,
			&i.AppType,
			&i.Name,
			&i.ClientID,
			&i.Version,
			&i.CreationMethod,
			&i.ClientUri,
			&i.LogoUri,
			&i.TosUri,
			&i.PolicyUri,
			&i.SoftwareID,
			&i.SoftwareVersion,
			&i.Contacts,
			&i.TokenEndpointAuthMethod,
			&i.Scopes,
			&i.CustomScopes,
			&i.GrantTypes,
			&i.Domain,
			&i.Transport,
			&i.AllowUserRegistration,
			&i.AuthProviders,
			&i.UsernameColumn,
			&i.DefaultScopes,
			&i.DefaultCustomScopes,
			&i.RedirectUris,
			&i.ResponseTypes,
			&i.IDTokenTtl,
			&i.TokenTtl,
			&i.RefreshTokenTtl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPaginatedAppsByAccountPublicIDOrderedByID = `-- name: FindPaginatedAppsByAccountPublicIDOrderedByID :many
SELECT id, account_id, account_public_id, app_type, name, client_id, version, creation_method, client_uri, logo_uri, tos_uri, policy_uri, software_id, software_version, contacts, token_endpoint_auth_method, scopes, custom_scopes, grant_types, domain, transport, allow_user_registration, auth_providers, username_column, default_scopes, default_custom_scopes, redirect_uris, response_types, id_token_ttl, token_ttl, refresh_token_ttl, created_at, updated_at FROM "apps"
WHERE "account_public_id" = $1
ORDER BY "id" DESC
OFFSET $2 LIMIT $3
`

type FindPaginatedAppsByAccountPublicIDOrderedByIDParams struct {
	AccountPublicID uuid.UUID
	Offset          int32
	Limit           int32
}

func (q *Queries) FindPaginatedAppsByAccountPublicIDOrderedByID(ctx context.Context, arg FindPaginatedAppsByAccountPublicIDOrderedByIDParams) ([]App, error) {
	rows, err := q.db.Query(ctx, findPaginatedAppsByAccountPublicIDOrderedByID, arg.AccountPublicID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []App{}
	for rows.Next() {
		var i App
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.AccountPublicID,
			&i.AppType,
			&i.Name,
			&i.ClientID,
			&i.Version,
			&i.CreationMethod,
			&i.ClientUri,
			&i.LogoUri,
			&i.TosUri,
			&i.PolicyUri,
			&i.SoftwareID,
			&i.SoftwareVersion,
			&i.Contacts,
			&i.TokenEndpointAuthMethod,
			&i.Scopes,
			&i.CustomScopes,
			&i.GrantTypes,
			&i.Domain,
			&i.Transport,
			&i.AllowUserRegistration,
			&i.AuthProviders,
			&i.UsernameColumn,
			&i.DefaultScopes,
			&i.DefaultCustomScopes,
			&i.RedirectUris,
			&i.ResponseTypes,
			&i.IDTokenTtl,
			&i.TokenTtl,
			&i.RefreshTokenTtl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPaginatedAppsByAccountPublicIDOrderedByName = `-- name: FindPaginatedAppsByAccountPublicIDOrderedByName :many
SELECT id, account_id, account_public_id, app_type, name, client_id, version, creation_method, client_uri, logo_uri, tos_uri, policy_uri, software_id, software_version, contacts, token_endpoint_auth_method, scopes, custom_scopes, grant_types, domain, transport, allow_user_registration, auth_providers, username_column, default_scopes, default_custom_scopes, redirect_uris, response_types, id_token_ttl, token_ttl, refresh_token_ttl, created_at, updated_at FROM "apps"
WHERE "account_public_id" = $1
ORDER BY "name" ASC
OFFSET $2 LIMIT $3
`

type FindPaginatedAppsByAccountPublicIDOrderedByNameParams struct {
	AccountPublicID uuid.UUID
	Offset          int32
	Limit           int32
}

func (q *Queries) FindPaginatedAppsByAccountPublicIDOrderedByName(ctx context.Context, arg FindPaginatedAppsByAccountPublicIDOrderedByNameParams) ([]App, error) {
	rows, err := q.db.Query(ctx, findPaginatedAppsByAccountPublicIDOrderedByName, arg.AccountPublicID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []App{}
	for rows.Next() {
		var i App
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.AccountPublicID,
			&i.AppType,
			&i.Name,
			&i.ClientID,
			&i.Version,
			&i.CreationMethod,
			&i.ClientUri,
			&i.LogoUri,
			&i.TosUri,
			&i.PolicyUri,
			&i.SoftwareID,
			&i.SoftwareVersion,
			&i.Contacts,
			&i.TokenEndpointAuthMethod,
			&i.Scopes,
			&i.CustomScopes,
			&i.GrantTypes,
			&i.Domain,
			&i.Transport,
			&i.AllowUserRegistration,
			&i.AuthProviders,
			&i.UsernameColumn,
			&i.DefaultScopes,
			&i.DefaultCustomScopes,
			&i.RedirectUris,
			&i.ResponseTypes,
			&i.IDTokenTtl,
			&i.TokenTtl,
			&i.RefreshTokenTtl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateApp = `-- name: UpdateApp :one
UPDATE "apps"
SET "name" = $2,
    "username_column" = $3,
    "client_uri" = $4,
    "logo_uri" = $5,
    "tos_uri" = $6,
    "policy_uri" = $7,
    "auth_providers" = $8,
    "software_version" = $9,
    "contacts" = $10,
    "domain" = $11,
    "transport" = $12,
    "redirect_uris" = $13,
    "allow_user_registration" = $14,
    "response_types" = $15,
    "version" = "version" + 1,
    "updated_at" = now()
WHERE "id" = $1
RETURNING id, account_id, account_public_id, app_type, name, client_id, version, creation_method, client_uri, logo_uri, tos_uri, policy_uri, software_id, software_version, contacts, token_endpoint_auth_method, scopes, custom_scopes, grant_types, domain, transport, allow_user_registration, auth_providers, username_column, default_scopes, default_custom_scopes, redirect_uris, response_types, id_token_ttl, token_ttl, refresh_token_ttl, created_at, updated_at
`

type UpdateAppParams struct {
	ID                    int32
	Name                  string
	UsernameColumn        AppUsernameColumn
	ClientUri             string
	LogoUri               pgtype.Text
	TosUri                pgtype.Text
	PolicyUri             pgtype.Text
	AuthProviders         []AuthProvider
	SoftwareVersion       pgtype.Text
	Contacts              []string
	Domain                string
	Transport             Transport
	RedirectUris          []string
	AllowUserRegistration bool
	ResponseTypes         []ResponseType
}

func (q *Queries) UpdateApp(ctx context.Context, arg UpdateAppParams) (App, error) {
	row := q.db.QueryRow(ctx, updateApp,
		arg.ID,
		arg.Name,
		arg.UsernameColumn,
		arg.ClientUri,
		arg.LogoUri,
		arg.TosUri,
		arg.PolicyUri,
		arg.AuthProviders,
		arg.SoftwareVersion,
		arg.Contacts,
		arg.Domain,
		arg.Transport,
		arg.RedirectUris,
		arg.AllowUserRegistration,
		arg.ResponseTypes,
	)
	var i App
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountPublicID,
		&i.AppType,
		&i.Name,
		&i.ClientID,
		&i.Version,
		&i.CreationMethod,
		&i.ClientUri,
		&i.LogoUri,
		&i.TosUri,
		&i.PolicyUri,
		&i.SoftwareID,
		&i.SoftwareVersion,
		&i.Contacts,
		&i.TokenEndpointAuthMethod,
		&i.Scopes,
		&i.CustomScopes,
		&i.GrantTypes,
		&i.Domain,
		&i.Transport,
		&i.AllowUserRegistration,
		&i.AuthProviders,
		&i.UsernameColumn,
		&i.DefaultScopes,
		&i.DefaultCustomScopes,
		&i.RedirectUris,
		&i.ResponseTypes,
		&i.IDTokenTtl,
		&i.TokenTtl,
		&i.RefreshTokenTtl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAppScopes = `-- name: UpdateAppScopes :one
UPDATE "apps"
SET "scopes" = $2,
    "default_scopes" = $3,
    "custom_scopes" = $4,
    "default_custom_scopes" = $5,
    "version" = "version" + 1,
    "updated_at" = now()
WHERE "id" = $1
RETURNING id, account_id, account_public_id, app_type, name, client_id, version, creation_method, client_uri, logo_uri, tos_uri, policy_uri, software_id, software_version, contacts, token_endpoint_auth_method, scopes, custom_scopes, grant_types, domain, transport, allow_user_registration, auth_providers, username_column, default_scopes, default_custom_scopes, redirect_uris, response_types, id_token_ttl, token_ttl, refresh_token_ttl, created_at, updated_at
`

type UpdateAppScopesParams struct {
	ID                  int32
	Scopes              []Scopes
	DefaultScopes       []Scopes
	CustomScopes        []string
	DefaultCustomScopes []string
}

func (q *Queries) UpdateAppScopes(ctx context.Context, arg UpdateAppScopesParams) (App, error) {
	row := q.db.QueryRow(ctx, updateAppScopes,
		arg.ID,
		arg.Scopes,
		arg.DefaultScopes,
		arg.CustomScopes,
		arg.DefaultCustomScopes,
	)
	var i App
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountPublicID,
		&i.AppType,
		&i.Name,
		&i.ClientID,
		&i.Version,
		&i.CreationMethod,
		&i.ClientUri,
		&i.LogoUri,
		&i.TosUri,
		&i.PolicyUri,
		&i.SoftwareID,
		&i.SoftwareVersion,
		&i.Contacts,
		&i.TokenEndpointAuthMethod,
		&i.Scopes,
		&i.CustomScopes,
		&i.GrantTypes,
		&i.Domain,
		&i.Transport,
		&i.AllowUserRegistration,
		&i.AuthProviders,
		&i.UsernameColumn,
		&i.DefaultScopes,
		&i.DefaultCustomScopes,
		&i.RedirectUris,
		&i.ResponseTypes,
		&i.IDTokenTtl,
		&i.TokenTtl,
		&i.RefreshTokenTtl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAppVersion = `-- name: UpdateAppVersion :one
UPDATE "apps" SET
    "version" = "version" + 1,
    "updated_at" = now()
WHERE "id" = $1
RETURNING id, account_id, account_public_id, app_type, name, client_id, version, creation_method, client_uri, logo_uri, tos_uri, policy_uri, software_id, software_version, contacts, token_endpoint_auth_method, scopes, custom_scopes, grant_types, domain, transport, allow_user_registration, auth_providers, username_column, default_scopes, default_custom_scopes, redirect_uris, response_types, id_token_ttl, token_ttl, refresh_token_ttl, created_at, updated_at
`

func (q *Queries) UpdateAppVersion(ctx context.Context, id int32) (App, error) {
	row := q.db.QueryRow(ctx, updateAppVersion, id)
	var i App
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountPublicID,
		&i.AppType,
		&i.Name,
		&i.ClientID,
		&i.Version,
		&i.CreationMethod,
		&i.ClientUri,
		&i.LogoUri,
		&i.TosUri,
		&i.PolicyUri,
		&i.SoftwareID,
		&i.SoftwareVersion,
		&i.Contacts,
		&i.TokenEndpointAuthMethod,
		&i.Scopes,
		&i.CustomScopes,
		&i.GrantTypes,
		&i.Domain,
		&i.Transport,
		&i.AllowUserRegistration,
		&i.AuthProviders,
		&i.UsernameColumn,
		&i.DefaultScopes,
		&i.DefaultCustomScopes,
		&i.RedirectUris,
		&i.ResponseTypes,
		&i.IDTokenTtl,
		&i.TokenTtl,
		&i.RefreshTokenTtl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
