// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: apps.sql

package database

import (
	"context"
)

const countAppsByAccountID = `-- name: CountAppsByAccountID :one
SELECT COUNT("id") FROM "apps"
WHERE "account_id" = $1
LIMIT 1
`

func (q *Queries) CountAppsByAccountID(ctx context.Context, accountID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countAppsByAccountID, accountID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAppsByNameAndAccountID = `-- name: CountAppsByNameAndAccountID :one
SELECT COUNT("id") FROM "apps"
WHERE "account_id" = $1 AND "name" = $2
LIMIT 1
`

type CountAppsByNameAndAccountIDParams struct {
	AccountID int32
	Name      string
}

func (q *Queries) CountAppsByNameAndAccountID(ctx context.Context, arg CountAppsByNameAndAccountIDParams) (int64, error) {
	row := q.db.QueryRow(ctx, countAppsByNameAndAccountID, arg.AccountID, arg.Name)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countFilteredAppsByNameAndByAccountID = `-- name: CountFilteredAppsByNameAndByAccountID :one
SELECT COUNT("id") FROM "apps"
WHERE "account_id" = $1 AND "name" ILIKE $2
LIMIT 1
`

type CountFilteredAppsByNameAndByAccountIDParams struct {
	AccountID int32
	Name      string
}

func (q *Queries) CountFilteredAppsByNameAndByAccountID(ctx context.Context, arg CountFilteredAppsByNameAndByAccountIDParams) (int64, error) {
	row := q.db.QueryRow(ctx, countFilteredAppsByNameAndByAccountID, arg.AccountID, arg.Name)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createApp = `-- name: CreateApp :one
INSERT INTO "apps" (
  "account_id",
  "name",
  "client_id",
  "client_secret",
  "dek"
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
) RETURNING id, account_id, name, client_id, client_secret, dek, callback_uris, logout_uris, user_scopes, app_providers, id_token_ttl, jwt_crypto_suite, created_at, updated_at
`

type CreateAppParams struct {
	AccountID    int32
	Name         string
	ClientID     string
	ClientSecret string
	Dek          string
}

func (q *Queries) CreateApp(ctx context.Context, arg CreateAppParams) (App, error) {
	row := q.db.QueryRow(ctx, createApp,
		arg.AccountID,
		arg.Name,
		arg.ClientID,
		arg.ClientSecret,
		arg.Dek,
	)
	var i App
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.ClientID,
		&i.ClientSecret,
		&i.Dek,
		&i.CallbackUris,
		&i.LogoutUris,
		&i.UserScopes,
		&i.AppProviders,
		&i.IDTokenTtl,
		&i.JwtCryptoSuite,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteApp = `-- name: DeleteApp :exec
DELETE FROM "apps"
WHERE "id" = $1
`

func (q *Queries) DeleteApp(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteApp, id)
	return err
}

const filterAppsByNameAndByAccountIDOrderedByID = `-- name: FilterAppsByNameAndByAccountIDOrderedByID :many
SELECT id, account_id, name, client_id, client_secret, dek, callback_uris, logout_uris, user_scopes, app_providers, id_token_ttl, jwt_crypto_suite, created_at, updated_at FROM "apps"
WHERE "account_id" = $1 AND "name" ILIKE $2
ORDER BY "id" DESC
OFFSET $3 LIMIT $4
`

type FilterAppsByNameAndByAccountIDOrderedByIDParams struct {
	AccountID int32
	Name      string
	Offset    int32
	Limit     int32
}

func (q *Queries) FilterAppsByNameAndByAccountIDOrderedByID(ctx context.Context, arg FilterAppsByNameAndByAccountIDOrderedByIDParams) ([]App, error) {
	rows, err := q.db.Query(ctx, filterAppsByNameAndByAccountIDOrderedByID,
		arg.AccountID,
		arg.Name,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []App{}
	for rows.Next() {
		var i App
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Name,
			&i.ClientID,
			&i.ClientSecret,
			&i.Dek,
			&i.CallbackUris,
			&i.LogoutUris,
			&i.UserScopes,
			&i.AppProviders,
			&i.IDTokenTtl,
			&i.JwtCryptoSuite,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filterAppsByNameAndByAccountIDOrderedByName = `-- name: FilterAppsByNameAndByAccountIDOrderedByName :many
SELECT id, account_id, name, client_id, client_secret, dek, callback_uris, logout_uris, user_scopes, app_providers, id_token_ttl, jwt_crypto_suite, created_at, updated_at FROM "apps"
WHERE "account_id" = $1 AND "name" ILIKE $2
ORDER BY "name" ASC
OFFSET $3 LIMIT $4
`

type FilterAppsByNameAndByAccountIDOrderedByNameParams struct {
	AccountID int32
	Name      string
	Offset    int32
	Limit     int32
}

func (q *Queries) FilterAppsByNameAndByAccountIDOrderedByName(ctx context.Context, arg FilterAppsByNameAndByAccountIDOrderedByNameParams) ([]App, error) {
	rows, err := q.db.Query(ctx, filterAppsByNameAndByAccountIDOrderedByName,
		arg.AccountID,
		arg.Name,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []App{}
	for rows.Next() {
		var i App
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Name,
			&i.ClientID,
			&i.ClientSecret,
			&i.Dek,
			&i.CallbackUris,
			&i.LogoutUris,
			&i.UserScopes,
			&i.AppProviders,
			&i.IDTokenTtl,
			&i.JwtCryptoSuite,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAppByClientID = `-- name: FindAppByClientID :one
SELECT id, account_id, name, client_id, client_secret, dek, callback_uris, logout_uris, user_scopes, app_providers, id_token_ttl, jwt_crypto_suite, created_at, updated_at FROM "apps"
WHERE "client_id" = $1 LIMIT 1
`

func (q *Queries) FindAppByClientID(ctx context.Context, clientID string) (App, error) {
	row := q.db.QueryRow(ctx, findAppByClientID, clientID)
	var i App
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.ClientID,
		&i.ClientSecret,
		&i.Dek,
		&i.CallbackUris,
		&i.LogoutUris,
		&i.UserScopes,
		&i.AppProviders,
		&i.IDTokenTtl,
		&i.JwtCryptoSuite,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findPaginatedAppsByAccountIDOrderedByID = `-- name: FindPaginatedAppsByAccountIDOrderedByID :many
SELECT id, account_id, name, client_id, client_secret, dek, callback_uris, logout_uris, user_scopes, app_providers, id_token_ttl, jwt_crypto_suite, created_at, updated_at FROM "apps"
WHERE "account_id" = $1
ORDER BY "id" DESC
OFFSET $2 LIMIT $3
`

type FindPaginatedAppsByAccountIDOrderedByIDParams struct {
	AccountID int32
	Offset    int32
	Limit     int32
}

func (q *Queries) FindPaginatedAppsByAccountIDOrderedByID(ctx context.Context, arg FindPaginatedAppsByAccountIDOrderedByIDParams) ([]App, error) {
	rows, err := q.db.Query(ctx, findPaginatedAppsByAccountIDOrderedByID, arg.AccountID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []App{}
	for rows.Next() {
		var i App
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Name,
			&i.ClientID,
			&i.ClientSecret,
			&i.Dek,
			&i.CallbackUris,
			&i.LogoutUris,
			&i.UserScopes,
			&i.AppProviders,
			&i.IDTokenTtl,
			&i.JwtCryptoSuite,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPaginatedAppsByAccountIDOrderedByName = `-- name: FindPaginatedAppsByAccountIDOrderedByName :many
SELECT id, account_id, name, client_id, client_secret, dek, callback_uris, logout_uris, user_scopes, app_providers, id_token_ttl, jwt_crypto_suite, created_at, updated_at FROM "apps"
WHERE "account_id" = $1
ORDER BY "name" ASC
OFFSET $2 LIMIT $3
`

type FindPaginatedAppsByAccountIDOrderedByNameParams struct {
	AccountID int32
	Offset    int32
	Limit     int32
}

func (q *Queries) FindPaginatedAppsByAccountIDOrderedByName(ctx context.Context, arg FindPaginatedAppsByAccountIDOrderedByNameParams) ([]App, error) {
	rows, err := q.db.Query(ctx, findPaginatedAppsByAccountIDOrderedByName, arg.AccountID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []App{}
	for rows.Next() {
		var i App
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Name,
			&i.ClientID,
			&i.ClientSecret,
			&i.Dek,
			&i.CallbackUris,
			&i.LogoutUris,
			&i.UserScopes,
			&i.AppProviders,
			&i.IDTokenTtl,
			&i.JwtCryptoSuite,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateApp = `-- name: UpdateApp :one
UPDATE "apps"
SET "name" = $2,
    "callback_uris" = $3,
    "logout_uris" = $4,
    "user_scopes" = $5,
    "app_providers" = $6,
    "id_token_ttl" = $7,
    "jwt_crypto_suite" = $8
WHERE "id" = $1
RETURNING id, account_id, name, client_id, client_secret, dek, callback_uris, logout_uris, user_scopes, app_providers, id_token_ttl, jwt_crypto_suite, created_at, updated_at
`

type UpdateAppParams struct {
	ID             int32
	Name           string
	CallbackUris   []string
	LogoutUris     []string
	UserScopes     []byte
	AppProviders   []byte
	IDTokenTtl     int32
	JwtCryptoSuite string
}

func (q *Queries) UpdateApp(ctx context.Context, arg UpdateAppParams) (App, error) {
	row := q.db.QueryRow(ctx, updateApp,
		arg.ID,
		arg.Name,
		arg.CallbackUris,
		arg.LogoutUris,
		arg.UserScopes,
		arg.AppProviders,
		arg.IDTokenTtl,
		arg.JwtCryptoSuite,
	)
	var i App
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.ClientID,
		&i.ClientSecret,
		&i.Dek,
		&i.CallbackUris,
		&i.LogoutUris,
		&i.UserScopes,
		&i.AppProviders,
		&i.IDTokenTtl,
		&i.JwtCryptoSuite,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
