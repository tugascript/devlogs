// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: apps.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createApp = `-- name: CreateApp :one
INSERT INTO "apps" (
    "id",
    "account_id",
    "name",
    "slug",
    "secret"
) VALUES (
    $1, 
    $2, 
    $3,
    $4,
    $5
) RETURNING id, account_id, name, slug, redirect_uris, sign_out_uri, id_token_ttl, secret, jwt_crypto_suite, created_at, updated_at
`

type CreateAppParams struct {
	ID        uuid.UUID
	AccountID int32
	Name      string
	Slug      string
	Secret    string
}

func (q *Queries) CreateApp(ctx context.Context, arg CreateAppParams) (App, error) {
	row := q.db.QueryRow(ctx, createApp,
		arg.ID,
		arg.AccountID,
		arg.Name,
		arg.Slug,
		arg.Secret,
	)
	var i App
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.Slug,
		&i.RedirectUris,
		&i.SignOutUri,
		&i.IDTokenTtl,
		&i.Secret,
		&i.JwtCryptoSuite,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAppIDBySlug = `-- name: FindAppIDBySlug :one
SELECT "id" FROM "apps"
WHERE "slug" = $1 LIMIT 1
`

func (q *Queries) FindAppIDBySlug(ctx context.Context, slug string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, findAppIDBySlug, slug)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
