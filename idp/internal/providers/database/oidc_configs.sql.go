// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: oidc_configs.sql

package database

import (
	"context"
)

const countOIDCConfigsByAccountID = `-- name: CountOIDCConfigsByAccountID :one

SELECT COUNT("id") FROM "oidc_configs"
WHERE "account_id" = $1
`

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CountOIDCConfigsByAccountID(ctx context.Context, accountID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countOIDCConfigsByAccountID, accountID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createDefaultOIDCConfig = `-- name: CreateDefaultOIDCConfig :one
INSERT INTO "oidc_configs" (
    "account_id"
) VALUES (
    $1
) RETURNING id, account_id, claims_supported, scopes_supported, user_roles_supported, created_at, updated_at
`

func (q *Queries) CreateDefaultOIDCConfig(ctx context.Context, accountID int32) (OidcConfig, error) {
	row := q.db.QueryRow(ctx, createDefaultOIDCConfig, accountID)
	var i OidcConfig
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.ClaimsSupported,
		&i.ScopesSupported,
		&i.UserRolesSupported,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createOIDCConfig = `-- name: CreateOIDCConfig :one
INSERT INTO "oidc_configs" (
    "account_id",
    "claims_supported",
    "scopes_supported"
) VALUES (
    $1,
    $2,
    $3
) RETURNING id, account_id, claims_supported, scopes_supported, user_roles_supported, created_at, updated_at
`

type CreateOIDCConfigParams struct {
	AccountID       int32
	ClaimsSupported []Claims
	ScopesSupported []Scopes
}

func (q *Queries) CreateOIDCConfig(ctx context.Context, arg CreateOIDCConfigParams) (OidcConfig, error) {
	row := q.db.QueryRow(ctx, createOIDCConfig, arg.AccountID, arg.ClaimsSupported, arg.ScopesSupported)
	var i OidcConfig
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.ClaimsSupported,
		&i.ScopesSupported,
		&i.UserRolesSupported,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findOIDCConfigByAccountID = `-- name: FindOIDCConfigByAccountID :one
SELECT id, account_id, claims_supported, scopes_supported, user_roles_supported, created_at, updated_at FROM "oidc_configs"
WHERE "account_id" = $1
LIMIT 1
`

func (q *Queries) FindOIDCConfigByAccountID(ctx context.Context, accountID int32) (OidcConfig, error) {
	row := q.db.QueryRow(ctx, findOIDCConfigByAccountID, accountID)
	var i OidcConfig
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.ClaimsSupported,
		&i.ScopesSupported,
		&i.UserRolesSupported,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOIDCConfig = `-- name: UpdateOIDCConfig :one
UPDATE "oidc_configs" SET
    "claims_supported" = $2,
    "scopes_supported" = $3,
    "user_roles_supported" = $4,
    "updated_at" = now()
WHERE "id" = $1
RETURNING id, account_id, claims_supported, scopes_supported, user_roles_supported, created_at, updated_at
`

type UpdateOIDCConfigParams struct {
	ID                 int32
	ClaimsSupported    []Claims
	ScopesSupported    []Scopes
	UserRolesSupported []string
}

func (q *Queries) UpdateOIDCConfig(ctx context.Context, arg UpdateOIDCConfigParams) (OidcConfig, error) {
	row := q.db.QueryRow(ctx, updateOIDCConfig,
		arg.ID,
		arg.ClaimsSupported,
		arg.ScopesSupported,
		arg.UserRolesSupported,
	)
	var i OidcConfig
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.ClaimsSupported,
		&i.ScopesSupported,
		&i.UserRolesSupported,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
