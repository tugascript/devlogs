// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: app_profiles.sql

package database

import (
	"context"
)

const createAppProfile = `-- name: CreateAppProfile :exec

INSERT INTO "app_profiles" (
    "account_id",
    "user_id",
    "app_id",
    "profile_type"
) VALUES (
    $1,
    $2,
    $3,
    $4
)
`

type CreateAppProfileParams struct {
	AccountID   int32
	UserID      int32
	AppID       int32
	ProfileType AppProfileType
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateAppProfile(ctx context.Context, arg CreateAppProfileParams) error {
	_, err := q.db.Exec(ctx, createAppProfile,
		arg.AccountID,
		arg.UserID,
		arg.AppID,
		arg.ProfileType,
	)
	return err
}

const findAppProfileByAppIDAndUserID = `-- name: FindAppProfileByAppIDAndUserID :one
SELECT app_id, user_id, account_id, profile_type, created_at FROM "app_profiles"
WHERE "app_id" = $1 AND "user_id" = $2
`

type FindAppProfileByAppIDAndUserIDParams struct {
	AppID  int32
	UserID int32
}

func (q *Queries) FindAppProfileByAppIDAndUserID(ctx context.Context, arg FindAppProfileByAppIDAndUserIDParams) (AppProfile, error) {
	row := q.db.QueryRow(ctx, findAppProfileByAppIDAndUserID, arg.AppID, arg.UserID)
	var i AppProfile
	err := row.Scan(
		&i.AppID,
		&i.UserID,
		&i.AccountID,
		&i.ProfileType,
		&i.CreatedAt,
	)
	return i, err
}
