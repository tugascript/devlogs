// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: key_encryption_keys.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createKeyEncryptionKey = `-- name: CreateKeyEncryptionKey :one

INSERT INTO "key_encryption_keys" (
    "kid",
    "usage",
    "next_rotation_at"
) VALUES (
    $1,
    $2,
    $3
) RETURNING "id"
`

type CreateKeyEncryptionKeyParams struct {
	Kid            uuid.UUID
	Usage          KekUsage
	NextRotationAt time.Time
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateKeyEncryptionKey(ctx context.Context, arg CreateKeyEncryptionKeyParams) (int32, error) {
	row := q.db.QueryRow(ctx, createKeyEncryptionKey, arg.Kid, arg.Usage, arg.NextRotationAt)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const findGlobalKeyEncryptionKey = `-- name: FindGlobalKeyEncryptionKey :one
SELECT id, kid, usage, version, rotated_at, next_rotation_at, created_at, updated_at FROM "key_encryption_keys"
WHERE "usage" = 'global'
LIMIT 1
`

func (q *Queries) FindGlobalKeyEncryptionKey(ctx context.Context) (KeyEncryptionKey, error) {
	row := q.db.QueryRow(ctx, findGlobalKeyEncryptionKey)
	var i KeyEncryptionKey
	err := row.Scan(
		&i.ID,
		&i.Kid,
		&i.Usage,
		&i.Version,
		&i.RotatedAt,
		&i.NextRotationAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findKeyEncryptionKeyByID = `-- name: FindKeyEncryptionKeyByID :one
SELECT id, kid, usage, version, rotated_at, next_rotation_at, created_at, updated_at FROM "key_encryption_keys"
WHERE "id" = $1
LIMIT 1
`

func (q *Queries) FindKeyEncryptionKeyByID(ctx context.Context, id int32) (KeyEncryptionKey, error) {
	row := q.db.QueryRow(ctx, findKeyEncryptionKeyByID, id)
	var i KeyEncryptionKey
	err := row.Scan(
		&i.ID,
		&i.Kid,
		&i.Usage,
		&i.Version,
		&i.RotatedAt,
		&i.NextRotationAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findKeyEncryptionKeyByKidAndUsage = `-- name: FindKeyEncryptionKeyByKidAndUsage :one
SELECT id, kid, usage, version, rotated_at, next_rotation_at, created_at, updated_at FROM "key_encryption_keys"
WHERE "kid" = $1 AND "usage" = $2
LIMIT 1
`

type FindKeyEncryptionKeyByKidAndUsageParams struct {
	Kid   uuid.UUID
	Usage KekUsage
}

func (q *Queries) FindKeyEncryptionKeyByKidAndUsage(ctx context.Context, arg FindKeyEncryptionKeyByKidAndUsageParams) (KeyEncryptionKey, error) {
	row := q.db.QueryRow(ctx, findKeyEncryptionKeyByKidAndUsage, arg.Kid, arg.Usage)
	var i KeyEncryptionKey
	err := row.Scan(
		&i.ID,
		&i.Kid,
		&i.Usage,
		&i.Version,
		&i.RotatedAt,
		&i.NextRotationAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const rotateKeyEncryptionKey = `-- name: RotateKeyEncryptionKey :one
UPDATE "key_encryption_keys" SET
    "version" = "version" + 1,
    "next_rotation_at" = $2,
    "rotated_at" = now()
WHERE "id" = $1
RETURNING "id"
`

type RotateKeyEncryptionKeyParams struct {
	ID             int32
	NextRotationAt time.Time
}

func (q *Queries) RotateKeyEncryptionKey(ctx context.Context, arg RotateKeyEncryptionKeyParams) (int32, error) {
	row := q.db.QueryRow(ctx, rotateKeyEncryptionKey, arg.ID, arg.NextRotationAt)
	var id int32
	err := row.Scan(&id)
	return id, err
}
