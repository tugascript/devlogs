// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: revoked_tokens.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getRevokedToken = `-- name: GetRevokedToken :one
SELECT id, token_id, account_id, owner, owner_public_id, issued_at, expires_at, created_at FROM "revoked_tokens"
WHERE "token_id" = $1 LIMIT 1
`

func (q *Queries) GetRevokedToken(ctx context.Context, tokenID uuid.UUID) (RevokedToken, error) {
	row := q.db.QueryRow(ctx, getRevokedToken, tokenID)
	var i RevokedToken
	err := row.Scan(
		&i.ID,
		&i.TokenID,
		&i.AccountID,
		&i.Owner,
		&i.OwnerPublicID,
		&i.IssuedAt,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const revokeToken = `-- name: RevokeToken :exec

INSERT INTO "revoked_tokens" (
  "token_id",
  "account_id",
  "owner",
  "owner_public_id",
  "issued_at",
  "expires_at"
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6
)
`

type RevokeTokenParams struct {
	TokenID       uuid.UUID
	AccountID     int32
	Owner         TokenOwner
	OwnerPublicID uuid.UUID
	IssuedAt      time.Time
	ExpiresAt     time.Time
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) RevokeToken(ctx context.Context, arg RevokeTokenParams) error {
	_, err := q.db.Exec(ctx, revokeToken,
		arg.TokenID,
		arg.AccountID,
		arg.Owner,
		arg.OwnerPublicID,
		arg.IssuedAt,
		arg.ExpiresAt,
	)
	return err
}
