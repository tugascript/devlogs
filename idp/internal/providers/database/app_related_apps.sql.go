// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: app_related_apps.sql

package database

import (
	"context"
)

const createAppRelatedApp = `-- name: CreateAppRelatedApp :exec

INSERT INTO "app_related_apps" (
    "app_id",
    "related_app_id",
    "account_id"
) VALUES (
    $1,
    $2,
    $3
)
`

type CreateAppRelatedAppParams struct {
	AppID        int32
	RelatedAppID int32
	AccountID    int32
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateAppRelatedApp(ctx context.Context, arg CreateAppRelatedAppParams) error {
	_, err := q.db.Exec(ctx, createAppRelatedApp, arg.AppID, arg.RelatedAppID, arg.AccountID)
	return err
}

const deleteAppRelatedAppsByAppIDAndRelatedAppIDs = `-- name: DeleteAppRelatedAppsByAppIDAndRelatedAppIDs :exec
DELETE FROM "app_related_apps"
WHERE "app_id" = $1 AND "related_app_id" IN ($2)
`

type DeleteAppRelatedAppsByAppIDAndRelatedAppIDsParams struct {
	AppID         int32
	RelatedAppIds []int32
}

func (q *Queries) DeleteAppRelatedAppsByAppIDAndRelatedAppIDs(ctx context.Context, arg DeleteAppRelatedAppsByAppIDAndRelatedAppIDsParams) error {
	_, err := q.db.Exec(ctx, deleteAppRelatedAppsByAppIDAndRelatedAppIDs, arg.AppID, arg.RelatedAppIds)
	return err
}

const findRelatedAppsByAppID = `-- name: FindRelatedAppsByAppID :many
SELECT a.id, a.account_id, a.account_public_id, a.app_type, a.name, a.client_id, a.version, a.creation_source, a.client_uri, a.logo_uri, a.tos_uri, a.policy_uri, a.software_id, a.software_version, a.contacts, a.token_endpoint_auth_method, a.scopes, a.custom_scopes, a.grant_types, a.domain, a.transport, a.allow_user_registration, a.auth_providers, a.username_column, a.default_scopes, a.default_custom_scopes, a.redirect_uris, a.response_types, a.id_token_ttl, a.token_ttl, a.refresh_token_ttl, a.created_at, a.updated_at FROM "apps" a
INNER JOIN "app_related_apps" ara ON a.id = ara.related_app_id
WHERE ara.app_id = $1
ORDER BY a.name ASC
`

func (q *Queries) FindRelatedAppsByAppID(ctx context.Context, appID int32) ([]App, error) {
	rows, err := q.db.Query(ctx, findRelatedAppsByAppID, appID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []App{}
	for rows.Next() {
		var i App
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.AccountPublicID,
			&i.AppType,
			&i.Name,
			&i.ClientID,
			&i.Version,
			&i.CreationSource,
			&i.ClientUri,
			&i.LogoUri,
			&i.TosUri,
			&i.PolicyUri,
			&i.SoftwareID,
			&i.SoftwareVersion,
			&i.Contacts,
			&i.TokenEndpointAuthMethod,
			&i.Scopes,
			&i.CustomScopes,
			&i.GrantTypes,
			&i.Domain,
			&i.Transport,
			&i.AllowUserRegistration,
			&i.AuthProviders,
			&i.UsernameColumn,
			&i.DefaultScopes,
			&i.DefaultCustomScopes,
			&i.RedirectUris,
			&i.ResponseTypes,
			&i.IDTokenTtl,
			&i.TokenTtl,
			&i.RefreshTokenTtl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
