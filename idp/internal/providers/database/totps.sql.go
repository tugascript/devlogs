// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: totps.sql

package database

import (
	"context"
)

const createTotp = `-- name: CreateTotp :one

INSERT INTO "totps" (
    "dek_kid",
    "url",
    "secret",
    "recovery_codes",
    "usage",
    "account_id"
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
) RETURNING "id"
`

type CreateTotpParams struct {
	DekKid        string
	Url           string
	Secret        string
	RecoveryCodes []byte
	Usage         TotpUsage
	AccountID     int32
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateTotp(ctx context.Context, arg CreateTotpParams) (int32, error) {
	row := q.db.QueryRow(ctx, createTotp,
		arg.DekKid,
		arg.Url,
		arg.Secret,
		arg.RecoveryCodes,
		arg.Usage,
		arg.AccountID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateTOTP = `-- name: UpdateTOTP :exec
UPDATE "totps" SET
    "url" = $2,
    "secret" = $3,
    "dek_kid" = $4,
    "recovery_codes" = $5,
    "updated_at" = now()
WHERE "id" = $1
`

type UpdateTOTPParams struct {
	ID            int32
	Url           string
	Secret        string
	DekKid        string
	RecoveryCodes []byte
}

func (q *Queries) UpdateTOTP(ctx context.Context, arg UpdateTOTPParams) error {
	_, err := q.db.Exec(ctx, updateTOTP,
		arg.ID,
		arg.Url,
		arg.Secret,
		arg.DekKid,
		arg.RecoveryCodes,
	)
	return err
}

const updateTOTPSecretAndDEK = `-- name: UpdateTOTPSecretAndDEK :exec
UPDATE "totps" SET
    "secret" = $2,
    "dek_kid" = $3,
    "updated_at" = now()
WHERE "id" = $1
`

type UpdateTOTPSecretAndDEKParams struct {
	ID     int32
	Secret string
	DekKid string
}

func (q *Queries) UpdateTOTPSecretAndDEK(ctx context.Context, arg UpdateTOTPSecretAndDEKParams) error {
	_, err := q.db.Exec(ctx, updateTOTPSecretAndDEK, arg.ID, arg.Secret, arg.DekKid)
	return err
}
