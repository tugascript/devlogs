// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: app_keys.sql

package database

import (
	"context"
	"time"
)

const createAppKey = `-- name: CreateAppKey :one
INSERT INTO "app_keys" (
    "app_id",
    "account_id",
    "name",
    "jwt_crypto_suite",
    "public_kid",
    "public_key",
    "private_key",
    "is_distributed",
    "expires_at"
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9
) RETURNING id, app_id, account_id, name, jwt_crypto_suite, public_kid, public_key, private_key, is_distributed, expires_at, created_at, updated_at
`

type CreateAppKeyParams struct {
	AppID          int32
	AccountID      int32
	Name           string
	JwtCryptoSuite string
	PublicKid      string
	PublicKey      []byte
	PrivateKey     string
	IsDistributed  bool
	ExpiresAt      time.Time
}

func (q *Queries) CreateAppKey(ctx context.Context, arg CreateAppKeyParams) (AppKey, error) {
	row := q.db.QueryRow(ctx, createAppKey,
		arg.AppID,
		arg.AccountID,
		arg.Name,
		arg.JwtCryptoSuite,
		arg.PublicKid,
		arg.PublicKey,
		arg.PrivateKey,
		arg.IsDistributed,
		arg.ExpiresAt,
	)
	var i AppKey
	err := row.Scan(
		&i.ID,
		&i.AppID,
		&i.AccountID,
		&i.Name,
		&i.JwtCryptoSuite,
		&i.PublicKid,
		&i.PublicKey,
		&i.PrivateKey,
		&i.IsDistributed,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDistributedAppKeysByAppID = `-- name: DeleteDistributedAppKeysByAppID :exec

DELETE FROM "app_keys"
WHERE "app_id" = $1 AND "is_distributed" = true
`

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) DeleteDistributedAppKeysByAppID(ctx context.Context, appID int32) error {
	_, err := q.db.Exec(ctx, deleteDistributedAppKeysByAppID, appID)
	return err
}

const findAppKeyByAppIDAndName = `-- name: FindAppKeyByAppIDAndName :one
SELECT id, app_id, account_id, name, jwt_crypto_suite, public_kid, public_key, private_key, is_distributed, expires_at, created_at, updated_at FROM "app_keys"
WHERE
    "app_id" = $1 AND
    "name" = $2 AND
    "expires_at" > $3
ORDER BY "id" DESC LIMIT 1
`

type FindAppKeyByAppIDAndNameParams struct {
	AppID     int32
	Name      string
	ExpiresAt time.Time
}

func (q *Queries) FindAppKeyByAppIDAndName(ctx context.Context, arg FindAppKeyByAppIDAndNameParams) (AppKey, error) {
	row := q.db.QueryRow(ctx, findAppKeyByAppIDAndName, arg.AppID, arg.Name, arg.ExpiresAt)
	var i AppKey
	err := row.Scan(
		&i.ID,
		&i.AppID,
		&i.AccountID,
		&i.Name,
		&i.JwtCryptoSuite,
		&i.PublicKid,
		&i.PublicKey,
		&i.PrivateKey,
		&i.IsDistributed,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAppKeyByPublicKID = `-- name: FindAppKeyByPublicKID :one
SELECT id, app_id, account_id, name, jwt_crypto_suite, public_kid, public_key, private_key, is_distributed, expires_at, created_at, updated_at FROM "app_keys"
WHERE "public_kid" = $1
LIMIT 1
`

func (q *Queries) FindAppKeyByPublicKID(ctx context.Context, publicKid string) (AppKey, error) {
	row := q.db.QueryRow(ctx, findAppKeyByPublicKID, publicKid)
	var i AppKey
	err := row.Scan(
		&i.ID,
		&i.AppID,
		&i.AccountID,
		&i.Name,
		&i.JwtCryptoSuite,
		&i.PublicKid,
		&i.PublicKey,
		&i.PrivateKey,
		&i.IsDistributed,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
