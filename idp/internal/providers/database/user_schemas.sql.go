// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_schemas.sql

package database

import (
	"context"
)

const countUserSchemasByAccountID = `-- name: CountUserSchemasByAccountID :one
SELECT COUNT("id") FROM "user_schemas"
WHERE "account_id" = $1
`

func (q *Queries) CountUserSchemasByAccountID(ctx context.Context, accountID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countUserSchemasByAccountID, accountID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createDefaultUserSchema = `-- name: CreateDefaultUserSchema :one
INSERT INTO "user_schemas" (
    "account_id"
) VALUES (
    $1
) RETURNING id, account_id, schema_data, created_at, updated_at
`

func (q *Queries) CreateDefaultUserSchema(ctx context.Context, accountID int32) (UserSchema, error) {
	row := q.db.QueryRow(ctx, createDefaultUserSchema, accountID)
	var i UserSchema
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.SchemaData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserSchema = `-- name: CreateUserSchema :one
INSERT INTO "user_schemas" (
    "account_id",
    "schema_data"
) VALUES (
    $1,
    $2
) RETURNING id, account_id, schema_data, created_at, updated_at
`

type CreateUserSchemaParams struct {
	AccountID  int32
	SchemaData []byte
}

func (q *Queries) CreateUserSchema(ctx context.Context, arg CreateUserSchemaParams) (UserSchema, error) {
	row := q.db.QueryRow(ctx, createUserSchema, arg.AccountID, arg.SchemaData)
	var i UserSchema
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.SchemaData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserSchemaByAccountID = `-- name: FindUserSchemaByAccountID :one
SELECT id, account_id, schema_data, created_at, updated_at FROM "user_schemas"
WHERE "account_id" = $1
LIMIT 1
`

func (q *Queries) FindUserSchemaByAccountID(ctx context.Context, accountID int32) (UserSchema, error) {
	row := q.db.QueryRow(ctx, findUserSchemaByAccountID, accountID)
	var i UserSchema
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.SchemaData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserSchema = `-- name: UpdateUserSchema :one
UPDATE "user_schemas" SET
    "schema_data" = $1,
    "updated_at" = now()
WHERE "id" = $2
RETURNING id, account_id, schema_data, created_at, updated_at
`

type UpdateUserSchemaParams struct {
	SchemaData []byte
	ID         int32
}

func (q *Queries) UpdateUserSchema(ctx context.Context, arg UpdateUserSchemaParams) (UserSchema, error) {
	row := q.db.QueryRow(ctx, updateUserSchema, arg.SchemaData, arg.ID)
	var i UserSchema
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.SchemaData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
