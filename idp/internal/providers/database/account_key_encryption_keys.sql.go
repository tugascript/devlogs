// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account_key_encryption_keys.sql

package database

import (
	"context"
)

const createAccountKeyEncryptionKey = `-- name: CreateAccountKeyEncryptionKey :exec

INSERT INTO "account_key_encryption_keys" (
    "account_id", 
    "key_encryption_key_id"
) VALUES (
    $1, 
    $2
)
`

type CreateAccountKeyEncryptionKeyParams struct {
	AccountID          int32
	KeyEncryptionKeyID int32
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateAccountKeyEncryptionKey(ctx context.Context, arg CreateAccountKeyEncryptionKeyParams) error {
	_, err := q.db.Exec(ctx, createAccountKeyEncryptionKey, arg.AccountID, arg.KeyEncryptionKeyID)
	return err
}

const findAccountKeyEncryptionKeyByAccountID = `-- name: FindAccountKeyEncryptionKeyByAccountID :one
SELECT k.id, k.kid, k.usage, k.version, k.rotated_at, k.next_rotation_at, k.created_at, k.updated_at FROM "key_encryption_keys" AS "k"
LEFT JOIN "account_key_encryption_keys" AS "akek" ON "k"."id" = "akek"."key_encryption_key_id"
WHERE "akek"."account_id" = $1
LIMIT 1
`

func (q *Queries) FindAccountKeyEncryptionKeyByAccountID(ctx context.Context, accountID int32) (KeyEncryptionKey, error) {
	row := q.db.QueryRow(ctx, findAccountKeyEncryptionKeyByAccountID, accountID)
	var i KeyEncryptionKey
	err := row.Scan(
		&i.ID,
		&i.Kid,
		&i.Usage,
		&i.Version,
		&i.RotatedAt,
		&i.NextRotationAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
