// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: blacklisted_tokens.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const blacklistToken = `-- name: BlacklistToken :exec
INSERT INTO "blacklisted_tokens" (
  "id",
  "expires_at"
) VALUES (
  $1,
    $2
)
`

type BlacklistTokenParams struct {
	ID        uuid.UUID
	ExpiresAt pgtype.Timestamp
}

func (q *Queries) BlacklistToken(ctx context.Context, arg BlacklistTokenParams) error {
	_, err := q.db.Exec(ctx, blacklistToken, arg.ID, arg.ExpiresAt)
	return err
}

const getBlacklistedToken = `-- name: GetBlacklistedToken :one
SELECT id, expires_at, created_at FROM "blacklisted_tokens"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetBlacklistedToken(ctx context.Context, id uuid.UUID) (BlacklistedToken, error) {
	row := q.db.QueryRow(ctx, getBlacklistedToken, id)
	var i BlacklistedToken
	err := row.Scan(&i.ID, &i.ExpiresAt, &i.CreatedAt)
	return i, err
}
