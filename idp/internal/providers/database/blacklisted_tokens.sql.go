// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: blacklisted_tokens.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const blacklistToken = `-- name: BlacklistToken :exec

INSERT INTO "blacklisted_tokens" (
  "id",
  "expires_at"
) VALUES (
  $1,
    $2
)
`

type BlacklistTokenParams struct {
	ID        uuid.UUID
	ExpiresAt time.Time
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) BlacklistToken(ctx context.Context, arg BlacklistTokenParams) error {
	_, err := q.db.Exec(ctx, blacklistToken, arg.ID, arg.ExpiresAt)
	return err
}

const getBlacklistedToken = `-- name: GetBlacklistedToken :one
SELECT id, expires_at, created_at FROM "blacklisted_tokens"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetBlacklistedToken(ctx context.Context, id uuid.UUID) (BlacklistedToken, error) {
	row := q.db.QueryRow(ctx, getBlacklistedToken, id)
	var i BlacklistedToken
	err := row.Scan(&i.ID, &i.ExpiresAt, &i.CreatedAt)
	return i, err
}
