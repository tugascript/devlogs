// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account_credentials.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countAccountCredentialsByAccountPublicID = `-- name: CountAccountCredentialsByAccountPublicID :one
SELECT COUNT(*) FROM "account_credentials"
WHERE "account_public_id" = $1
LIMIT 1
`

func (q *Queries) CountAccountCredentialsByAccountPublicID(ctx context.Context, accountPublicID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countAccountCredentialsByAccountPublicID, accountPublicID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAccountCredentialsByNameAndAccountID = `-- name: CountAccountCredentialsByNameAndAccountID :one
SELECT COUNT(*) FROM "account_credentials"
WHERE "account_id" = $1 AND "name" = $2
`

type CountAccountCredentialsByNameAndAccountIDParams struct {
	AccountID int32
	Name      string
}

func (q *Queries) CountAccountCredentialsByNameAndAccountID(ctx context.Context, arg CountAccountCredentialsByNameAndAccountIDParams) (int64, error) {
	row := q.db.QueryRow(ctx, countAccountCredentialsByNameAndAccountID, arg.AccountID, arg.Name)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAccountCredentials = `-- name: CreateAccountCredentials :one
INSERT INTO "account_credentials" (
    "client_id",
    "account_id",
    "account_public_id",
    "credentials_type",
    "name",
    "scopes",
    "token_endpoint_auth_method",
    "domain",
    "client_uri",
    "redirect_uris",
    "logo_uri",
    "policy_uri",
    "tos_uri",
    "software_id",
    "software_version",
    "contacts",
    "creation_method",
    "transport"
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18
) RETURNING id, account_id, account_public_id, client_id, name, domain, credentials_type, scopes, token_endpoint_auth_method, grant_types, version, transport, creation_method, client_uri, redirect_uris, logo_uri, policy_uri, tos_uri, software_id, software_version, contacts, created_at, updated_at
`

type CreateAccountCredentialsParams struct {
	ClientID                string
	AccountID               int32
	AccountPublicID         uuid.UUID
	CredentialsType         AccountCredentialsType
	Name                    string
	Scopes                  []AccountCredentialsScope
	TokenEndpointAuthMethod AuthMethod
	Domain                  string
	ClientUri               string
	RedirectUris            []string
	LogoUri                 pgtype.Text
	PolicyUri               pgtype.Text
	TosUri                  pgtype.Text
	SoftwareID              string
	SoftwareVersion         pgtype.Text
	Contacts                []string
	CreationMethod          CreationMethod
	Transport               Transport
}

func (q *Queries) CreateAccountCredentials(ctx context.Context, arg CreateAccountCredentialsParams) (AccountCredential, error) {
	row := q.db.QueryRow(ctx, createAccountCredentials,
		arg.ClientID,
		arg.AccountID,
		arg.AccountPublicID,
		arg.CredentialsType,
		arg.Name,
		arg.Scopes,
		arg.TokenEndpointAuthMethod,
		arg.Domain,
		arg.ClientUri,
		arg.RedirectUris,
		arg.LogoUri,
		arg.PolicyUri,
		arg.TosUri,
		arg.SoftwareID,
		arg.SoftwareVersion,
		arg.Contacts,
		arg.CreationMethod,
		arg.Transport,
	)
	var i AccountCredential
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountPublicID,
		&i.ClientID,
		&i.Name,
		&i.Domain,
		&i.CredentialsType,
		&i.Scopes,
		&i.TokenEndpointAuthMethod,
		&i.GrantTypes,
		&i.Version,
		&i.Transport,
		&i.CreationMethod,
		&i.ClientUri,
		&i.RedirectUris,
		&i.LogoUri,
		&i.PolicyUri,
		&i.TosUri,
		&i.SoftwareID,
		&i.SoftwareVersion,
		&i.Contacts,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccountCredentials = `-- name: DeleteAccountCredentials :exec
DELETE FROM "account_credentials"
WHERE "client_id" = $1
`

func (q *Queries) DeleteAccountCredentials(ctx context.Context, clientID string) error {
	_, err := q.db.Exec(ctx, deleteAccountCredentials, clientID)
	return err
}

const deleteAllAccountCredentials = `-- name: DeleteAllAccountCredentials :exec
DELETE FROM "account_credentials"
`

func (q *Queries) DeleteAllAccountCredentials(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllAccountCredentials)
	return err
}

const findAccountCredentialsByAccountPublicIDAndClientID = `-- name: FindAccountCredentialsByAccountPublicIDAndClientID :one
SELECT id, account_id, account_public_id, client_id, name, domain, credentials_type, scopes, token_endpoint_auth_method, grant_types, version, transport, creation_method, client_uri, redirect_uris, logo_uri, policy_uri, tos_uri, software_id, software_version, contacts, created_at, updated_at FROM "account_credentials"
WHERE "account_public_id" = $1 AND "client_id" = $2
LIMIT 1
`

type FindAccountCredentialsByAccountPublicIDAndClientIDParams struct {
	AccountPublicID uuid.UUID
	ClientID        string
}

func (q *Queries) FindAccountCredentialsByAccountPublicIDAndClientID(ctx context.Context, arg FindAccountCredentialsByAccountPublicIDAndClientIDParams) (AccountCredential, error) {
	row := q.db.QueryRow(ctx, findAccountCredentialsByAccountPublicIDAndClientID, arg.AccountPublicID, arg.ClientID)
	var i AccountCredential
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountPublicID,
		&i.ClientID,
		&i.Name,
		&i.Domain,
		&i.CredentialsType,
		&i.Scopes,
		&i.TokenEndpointAuthMethod,
		&i.GrantTypes,
		&i.Version,
		&i.Transport,
		&i.CreationMethod,
		&i.ClientUri,
		&i.RedirectUris,
		&i.LogoUri,
		&i.PolicyUri,
		&i.TosUri,
		&i.SoftwareID,
		&i.SoftwareVersion,
		&i.Contacts,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAccountCredentialsByClientID = `-- name: FindAccountCredentialsByClientID :one

SELECT id, account_id, account_public_id, client_id, name, domain, credentials_type, scopes, token_endpoint_auth_method, grant_types, version, transport, creation_method, client_uri, redirect_uris, logo_uri, policy_uri, tos_uri, software_id, software_version, contacts, created_at, updated_at FROM "account_credentials"
WHERE "client_id" = $1
LIMIT 1
`

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) FindAccountCredentialsByClientID(ctx context.Context, clientID string) (AccountCredential, error) {
	row := q.db.QueryRow(ctx, findAccountCredentialsByClientID, clientID)
	var i AccountCredential
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountPublicID,
		&i.ClientID,
		&i.Name,
		&i.Domain,
		&i.CredentialsType,
		&i.Scopes,
		&i.TokenEndpointAuthMethod,
		&i.GrantTypes,
		&i.Version,
		&i.Transport,
		&i.CreationMethod,
		&i.ClientUri,
		&i.RedirectUris,
		&i.LogoUri,
		&i.PolicyUri,
		&i.TosUri,
		&i.SoftwareID,
		&i.SoftwareVersion,
		&i.Contacts,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findPaginatedAccountCredentialsByAccountPublicID = `-- name: FindPaginatedAccountCredentialsByAccountPublicID :many
SELECT id, account_id, account_public_id, client_id, name, domain, credentials_type, scopes, token_endpoint_auth_method, grant_types, version, transport, creation_method, client_uri, redirect_uris, logo_uri, policy_uri, tos_uri, software_id, software_version, contacts, created_at, updated_at FROM "account_credentials"
WHERE "account_public_id" = $1
ORDER BY "id" DESC
OFFSET $2 LIMIT $3
`

type FindPaginatedAccountCredentialsByAccountPublicIDParams struct {
	AccountPublicID uuid.UUID
	Offset          int32
	Limit           int32
}

func (q *Queries) FindPaginatedAccountCredentialsByAccountPublicID(ctx context.Context, arg FindPaginatedAccountCredentialsByAccountPublicIDParams) ([]AccountCredential, error) {
	rows, err := q.db.Query(ctx, findPaginatedAccountCredentialsByAccountPublicID, arg.AccountPublicID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AccountCredential{}
	for rows.Next() {
		var i AccountCredential
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.AccountPublicID,
			&i.ClientID,
			&i.Name,
			&i.Domain,
			&i.CredentialsType,
			&i.Scopes,
			&i.TokenEndpointAuthMethod,
			&i.GrantTypes,
			&i.Version,
			&i.Transport,
			&i.CreationMethod,
			&i.ClientUri,
			&i.RedirectUris,
			&i.LogoUri,
			&i.PolicyUri,
			&i.TosUri,
			&i.SoftwareID,
			&i.SoftwareVersion,
			&i.Contacts,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountCredentials = `-- name: UpdateAccountCredentials :one
UPDATE "account_credentials" SET
    "scopes" = $2,
    "name" = $3,
    "domain" = $4,
    "client_uri" = $5,
    "redirect_uris" = $6,
    "logo_uri" = $7,
    "policy_uri" = $8,
    "tos_uri" = $9,
    "software_version" = $10,
    "contacts" = $11,
    "transport" = $12,
    "version" = "version" + 1,
    "updated_at" = now()
WHERE "id" = $1
RETURNING id, account_id, account_public_id, client_id, name, domain, credentials_type, scopes, token_endpoint_auth_method, grant_types, version, transport, creation_method, client_uri, redirect_uris, logo_uri, policy_uri, tos_uri, software_id, software_version, contacts, created_at, updated_at
`

type UpdateAccountCredentialsParams struct {
	ID              int32
	Scopes          []AccountCredentialsScope
	Name            string
	Domain          string
	ClientUri       string
	RedirectUris    []string
	LogoUri         pgtype.Text
	PolicyUri       pgtype.Text
	TosUri          pgtype.Text
	SoftwareVersion pgtype.Text
	Contacts        []string
	Transport       Transport
}

func (q *Queries) UpdateAccountCredentials(ctx context.Context, arg UpdateAccountCredentialsParams) (AccountCredential, error) {
	row := q.db.QueryRow(ctx, updateAccountCredentials,
		arg.ID,
		arg.Scopes,
		arg.Name,
		arg.Domain,
		arg.ClientUri,
		arg.RedirectUris,
		arg.LogoUri,
		arg.PolicyUri,
		arg.TosUri,
		arg.SoftwareVersion,
		arg.Contacts,
		arg.Transport,
	)
	var i AccountCredential
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountPublicID,
		&i.ClientID,
		&i.Name,
		&i.Domain,
		&i.CredentialsType,
		&i.Scopes,
		&i.TokenEndpointAuthMethod,
		&i.GrantTypes,
		&i.Version,
		&i.Transport,
		&i.CreationMethod,
		&i.ClientUri,
		&i.RedirectUris,
		&i.LogoUri,
		&i.PolicyUri,
		&i.TosUri,
		&i.SoftwareID,
		&i.SoftwareVersion,
		&i.Contacts,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
