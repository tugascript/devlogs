// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account_credentials.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const countAccountCredentialsByAccountPublicID = `-- name: CountAccountCredentialsByAccountPublicID :one
SELECT COUNT("id") FROM "account_credentials"
WHERE "account_public_id" = $1
LIMIT 1
`

func (q *Queries) CountAccountCredentialsByAccountPublicID(ctx context.Context, accountPublicID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countAccountCredentialsByAccountPublicID, accountPublicID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAccountCredentialsByAliasAndAccountID = `-- name: CountAccountCredentialsByAliasAndAccountID :one
SELECT COUNT("id") FROM "account_credentials"
WHERE "account_id" = $1 AND "alias" = $2
`

type CountAccountCredentialsByAliasAndAccountIDParams struct {
	AccountID int32
	Alias     string
}

func (q *Queries) CountAccountCredentialsByAliasAndAccountID(ctx context.Context, arg CountAccountCredentialsByAliasAndAccountIDParams) (int64, error) {
	row := q.db.QueryRow(ctx, countAccountCredentialsByAliasAndAccountID, arg.AccountID, arg.Alias)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAccountCredentials = `-- name: CreateAccountCredentials :one
INSERT INTO "account_credentials" (
    "client_id",
    "account_id",
    "account_public_id",
    "alias",
    "scopes",
    "auth_methods",
    "issuers"
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
) RETURNING id, account_id, account_public_id, scopes, auth_methods, issuers, alias, client_id, created_at, updated_at
`

type CreateAccountCredentialsParams struct {
	ClientID        string
	AccountID       int32
	AccountPublicID uuid.UUID
	Alias           string
	Scopes          []AccountCredentialsScope
	AuthMethods     []AuthMethod
	Issuers         []string
}

func (q *Queries) CreateAccountCredentials(ctx context.Context, arg CreateAccountCredentialsParams) (AccountCredential, error) {
	row := q.db.QueryRow(ctx, createAccountCredentials,
		arg.ClientID,
		arg.AccountID,
		arg.AccountPublicID,
		arg.Alias,
		arg.Scopes,
		arg.AuthMethods,
		arg.Issuers,
	)
	var i AccountCredential
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountPublicID,
		&i.Scopes,
		&i.AuthMethods,
		&i.Issuers,
		&i.Alias,
		&i.ClientID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccountCredentials = `-- name: DeleteAccountCredentials :exec
DELETE FROM "account_credentials"
WHERE "client_id" = $1
`

func (q *Queries) DeleteAccountCredentials(ctx context.Context, clientID string) error {
	_, err := q.db.Exec(ctx, deleteAccountCredentials, clientID)
	return err
}

const deleteAllAccountCredentials = `-- name: DeleteAllAccountCredentials :exec
DELETE FROM "account_credentials"
`

func (q *Queries) DeleteAllAccountCredentials(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllAccountCredentials)
	return err
}

const findAccountCredentialsByAccountPublicIDAndClientID = `-- name: FindAccountCredentialsByAccountPublicIDAndClientID :one
SELECT id, account_id, account_public_id, scopes, auth_methods, issuers, alias, client_id, created_at, updated_at FROM "account_credentials"
WHERE "account_public_id" = $1 AND "client_id" = $2
LIMIT 1
`

type FindAccountCredentialsByAccountPublicIDAndClientIDParams struct {
	AccountPublicID uuid.UUID
	ClientID        string
}

func (q *Queries) FindAccountCredentialsByAccountPublicIDAndClientID(ctx context.Context, arg FindAccountCredentialsByAccountPublicIDAndClientIDParams) (AccountCredential, error) {
	row := q.db.QueryRow(ctx, findAccountCredentialsByAccountPublicIDAndClientID, arg.AccountPublicID, arg.ClientID)
	var i AccountCredential
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountPublicID,
		&i.Scopes,
		&i.AuthMethods,
		&i.Issuers,
		&i.Alias,
		&i.ClientID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAccountCredentialsByClientID = `-- name: FindAccountCredentialsByClientID :one

SELECT id, account_id, account_public_id, scopes, auth_methods, issuers, alias, client_id, created_at, updated_at FROM "account_credentials"
WHERE "client_id" = $1
LIMIT 1
`

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) FindAccountCredentialsByClientID(ctx context.Context, clientID string) (AccountCredential, error) {
	row := q.db.QueryRow(ctx, findAccountCredentialsByClientID, clientID)
	var i AccountCredential
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountPublicID,
		&i.Scopes,
		&i.AuthMethods,
		&i.Issuers,
		&i.Alias,
		&i.ClientID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findPaginatedAccountCredentialsByAccountPublicID = `-- name: FindPaginatedAccountCredentialsByAccountPublicID :many
SELECT id, account_id, account_public_id, scopes, auth_methods, issuers, alias, client_id, created_at, updated_at FROM "account_credentials"
WHERE "account_public_id" = $1
ORDER BY "id" DESC
OFFSET $2 LIMIT $3
`

type FindPaginatedAccountCredentialsByAccountPublicIDParams struct {
	AccountPublicID uuid.UUID
	Offset          int32
	Limit           int32
}

func (q *Queries) FindPaginatedAccountCredentialsByAccountPublicID(ctx context.Context, arg FindPaginatedAccountCredentialsByAccountPublicIDParams) ([]AccountCredential, error) {
	rows, err := q.db.Query(ctx, findPaginatedAccountCredentialsByAccountPublicID, arg.AccountPublicID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AccountCredential{}
	for rows.Next() {
		var i AccountCredential
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.AccountPublicID,
			&i.Scopes,
			&i.AuthMethods,
			&i.Issuers,
			&i.Alias,
			&i.ClientID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountCredentials = `-- name: UpdateAccountCredentials :one
UPDATE "account_credentials" SET
    "scopes" = $1,
    "alias" = $2,
    "updated_at" = now()
WHERE "id" = $3
RETURNING id, account_id, account_public_id, scopes, auth_methods, issuers, alias, client_id, created_at, updated_at
`

type UpdateAccountCredentialsParams struct {
	Scopes []AccountCredentialsScope
	Alias  string
	ID     int32
}

func (q *Queries) UpdateAccountCredentials(ctx context.Context, arg UpdateAccountCredentialsParams) (AccountCredential, error) {
	row := q.db.QueryRow(ctx, updateAccountCredentials, arg.Scopes, arg.Alias, arg.ID)
	var i AccountCredential
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountPublicID,
		&i.Scopes,
		&i.AuthMethods,
		&i.Issuers,
		&i.Alias,
		&i.ClientID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
