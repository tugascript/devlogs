// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_auth_providers.sql

package database

import (
	"context"
)

const createUserAuthProvider = `-- name: CreateUserAuthProvider :exec

INSERT INTO "user_auth_providers" (
  "account_id",
  "user_id",
  "provider"
) VALUES (
  $1,
  $2,
  $3
)
`

type CreateUserAuthProviderParams struct {
	AccountID int32
	UserID    int32
	Provider  AuthProvider
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateUserAuthProvider(ctx context.Context, arg CreateUserAuthProviderParams) error {
	_, err := q.db.Exec(ctx, createUserAuthProvider, arg.AccountID, arg.UserID, arg.Provider)
	return err
}

const findUserAuthProviderByUserIDAndProvider = `-- name: FindUserAuthProviderByUserIDAndProvider :one
SELECT id, user_id, account_id, provider, created_at, updated_at FROM "user_auth_providers"
WHERE
  "user_id" = $1 AND
  "provider" = $2
LIMIT 1
`

type FindUserAuthProviderByUserIDAndProviderParams struct {
	UserID   int32
	Provider AuthProvider
}

func (q *Queries) FindUserAuthProviderByUserIDAndProvider(ctx context.Context, arg FindUserAuthProviderByUserIDAndProviderParams) (UserAuthProvider, error) {
	row := q.db.QueryRow(ctx, findUserAuthProviderByUserIDAndProvider, arg.UserID, arg.Provider)
	var i UserAuthProvider
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccountID,
		&i.Provider,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
