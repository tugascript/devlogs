// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: token_signing_keys.sql

package database

import (
	"context"
	"time"
)

const createTokenSigningKey = `-- name: CreateTokenSigningKey :one

INSERT INTO "token_signing_keys" (
    "kid",
    "key_type",
    "public_key",
    "private_key",
    "dek_kid",
    "crypto_suite",
    "expires_at",
    "usage",
    "is_distributed"
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9
) RETURNING "id"
`

type CreateTokenSigningKeyParams struct {
	Kid           string
	KeyType       TokenKeyType
	PublicKey     []byte
	PrivateKey    string
	DekKid        string
	CryptoSuite   TokenCryptoSuite
	ExpiresAt     time.Time
	Usage         TokenKeyUsage
	IsDistributed bool
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateTokenSigningKey(ctx context.Context, arg CreateTokenSigningKeyParams) (int32, error) {
	row := q.db.QueryRow(ctx, createTokenSigningKey,
		arg.Kid,
		arg.KeyType,
		arg.PublicKey,
		arg.PrivateKey,
		arg.DekKid,
		arg.CryptoSuite,
		arg.ExpiresAt,
		arg.Usage,
		arg.IsDistributed,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const findGlobalDistributedTokenSigningKeyPublicKeys = `-- name: FindGlobalDistributedTokenSigningKeyPublicKeys :many
SELECT "public_key" FROM "token_signing_keys"
WHERE
    "usage" = 'global' AND
    "is_distributed" = true AND
    "is_revoked" = false AND
    "expires_at" > NOW()
ORDER BY "id" DESC
`

func (q *Queries) FindGlobalDistributedTokenSigningKeyPublicKeys(ctx context.Context) ([][]byte, error) {
	rows, err := q.db.Query(ctx, findGlobalDistributedTokenSigningKeyPublicKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := [][]byte{}
	for rows.Next() {
		var public_key []byte
		if err := rows.Scan(&public_key); err != nil {
			return nil, err
		}
		items = append(items, public_key)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findGlobalTokenSigningKey = `-- name: FindGlobalTokenSigningKey :one
SELECT id, kid, key_type, public_key, private_key, dek_kid, crypto_suite, expires_at, usage, is_distributed, is_revoked, created_at, updated_at FROM "token_signing_keys"
WHERE 
    "key_type" = $1 AND 
    "usage" = 'global' AND
    "is_revoked" = false AND
    "expires_at" > $2
ORDER BY "id" DESC
LIMIT 1
`

type FindGlobalTokenSigningKeyParams struct {
	KeyType   TokenKeyType
	ExpiresAt time.Time
}

func (q *Queries) FindGlobalTokenSigningKey(ctx context.Context, arg FindGlobalTokenSigningKeyParams) (TokenSigningKey, error) {
	row := q.db.QueryRow(ctx, findGlobalTokenSigningKey, arg.KeyType, arg.ExpiresAt)
	var i TokenSigningKey
	err := row.Scan(
		&i.ID,
		&i.Kid,
		&i.KeyType,
		&i.PublicKey,
		&i.PrivateKey,
		&i.DekKid,
		&i.CryptoSuite,
		&i.ExpiresAt,
		&i.Usage,
		&i.IsDistributed,
		&i.IsRevoked,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findTokenSigningKeyByKID = `-- name: FindTokenSigningKeyByKID :one
SELECT id, kid, key_type, public_key, private_key, dek_kid, crypto_suite, expires_at, usage, is_distributed, is_revoked, created_at, updated_at FROM "token_signing_keys"
WHERE 
    "kid" = $1 AND
    "is_revoked" = false
LIMIT 1
`

func (q *Queries) FindTokenSigningKeyByKID(ctx context.Context, kid string) (TokenSigningKey, error) {
	row := q.db.QueryRow(ctx, findTokenSigningKeyByKID, kid)
	var i TokenSigningKey
	err := row.Scan(
		&i.ID,
		&i.Kid,
		&i.KeyType,
		&i.PublicKey,
		&i.PrivateKey,
		&i.DekKid,
		&i.CryptoSuite,
		&i.ExpiresAt,
		&i.Usage,
		&i.IsDistributed,
		&i.IsRevoked,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTokenSigningKeyDEKAndPrivateKey = `-- name: UpdateTokenSigningKeyDEKAndPrivateKey :exec
UPDATE "token_signing_keys"
SET
    "dek_kid"    = $2,
    "private_key" = $3,
    "updated_at" = NOW()
WHERE "id" = $1
RETURNING id, kid, key_type, public_key, private_key, dek_kid, crypto_suite, expires_at, usage, is_distributed, is_revoked, created_at, updated_at
`

type UpdateTokenSigningKeyDEKAndPrivateKeyParams struct {
	ID         int32
	DekKid     string
	PrivateKey string
}

func (q *Queries) UpdateTokenSigningKeyDEKAndPrivateKey(ctx context.Context, arg UpdateTokenSigningKeyDEKAndPrivateKeyParams) error {
	_, err := q.db.Exec(ctx, updateTokenSigningKeyDEKAndPrivateKey, arg.ID, arg.DekKid, arg.PrivateKey)
	return err
}
