// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: credentials_keys.sql

package database

import (
	"context"
	"time"
)

const createCredentialsKey = `-- name: CreateCredentialsKey :one

INSERT INTO "credentials_keys" (
    "account_id",
    "public_kid",
    "public_key",
    "crypto_suite",
    "expires_at",
    "usage"
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
) RETURNING id, public_kid, public_key, crypto_suite, is_revoked, usage, account_id, expires_at, created_at, updated_at
`

type CreateCredentialsKeyParams struct {
	AccountID   int32
	PublicKid   string
	PublicKey   []byte
	CryptoSuite TokenCryptoSuite
	ExpiresAt   time.Time
	Usage       CredentialsUsage
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateCredentialsKey(ctx context.Context, arg CreateCredentialsKeyParams) (CredentialsKey, error) {
	row := q.db.QueryRow(ctx, createCredentialsKey,
		arg.AccountID,
		arg.PublicKid,
		arg.PublicKey,
		arg.CryptoSuite,
		arg.ExpiresAt,
		arg.Usage,
	)
	var i CredentialsKey
	err := row.Scan(
		&i.ID,
		&i.PublicKid,
		&i.PublicKey,
		&i.CryptoSuite,
		&i.IsRevoked,
		&i.Usage,
		&i.AccountID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllCredentialsKeys = `-- name: DeleteAllCredentialsKeys :exec
DELETE FROM "credentials_keys"
`

func (q *Queries) DeleteAllCredentialsKeys(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllCredentialsKeys)
	return err
}

const findCredentialsKeyPublicKeyByPublicKIDCryptoSuiteAndUsage = `-- name: FindCredentialsKeyPublicKeyByPublicKIDCryptoSuiteAndUsage :one
SELECT "public_key" FROM "credentials_keys"
WHERE
    "public_kid" = $1 AND
    "usage" = $2 AND
    "crypto_suite" = $3 AND
    "is_revoked" = false AND
    "expires_at" > now()
LIMIT 1
`

type FindCredentialsKeyPublicKeyByPublicKIDCryptoSuiteAndUsageParams struct {
	PublicKid   string
	Usage       CredentialsUsage
	CryptoSuite TokenCryptoSuite
}

func (q *Queries) FindCredentialsKeyPublicKeyByPublicKIDCryptoSuiteAndUsage(ctx context.Context, arg FindCredentialsKeyPublicKeyByPublicKIDCryptoSuiteAndUsageParams) ([]byte, error) {
	row := q.db.QueryRow(ctx, findCredentialsKeyPublicKeyByPublicKIDCryptoSuiteAndUsage, arg.PublicKid, arg.Usage, arg.CryptoSuite)
	var public_key []byte
	err := row.Scan(&public_key)
	return public_key, err
}

const revokeCredentialsKey = `-- name: RevokeCredentialsKey :one
UPDATE "credentials_keys" SET
    "is_revoked" = true,
    "updated_at" = now()
WHERE "id" = $1
RETURNING id, public_kid, public_key, crypto_suite, is_revoked, usage, account_id, expires_at, created_at, updated_at
`

func (q *Queries) RevokeCredentialsKey(ctx context.Context, id int32) (CredentialsKey, error) {
	row := q.db.QueryRow(ctx, revokeCredentialsKey, id)
	var i CredentialsKey
	err := row.Scan(
		&i.ID,
		&i.PublicKid,
		&i.PublicKey,
		&i.CryptoSuite,
		&i.IsRevoked,
		&i.Usage,
		&i.AccountID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCredentialsKeyExpiresAtAndCreatedAt = `-- name: UpdateCredentialsKeyExpiresAtAndCreatedAt :exec
UPDATE "credentials_keys" SET
    "expires_at" = $2,
    "created_at" = $3,
    "updated_at" = now()
WHERE "public_kid" = $1
`

type UpdateCredentialsKeyExpiresAtAndCreatedAtParams struct {
	PublicKid string
	ExpiresAt time.Time
	CreatedAt time.Time
}

func (q *Queries) UpdateCredentialsKeyExpiresAtAndCreatedAt(ctx context.Context, arg UpdateCredentialsKeyExpiresAtAndCreatedAtParams) error {
	_, err := q.db.Exec(ctx, updateCredentialsKeyExpiresAtAndCreatedAt, arg.PublicKid, arg.ExpiresAt, arg.CreatedAt)
	return err
}
