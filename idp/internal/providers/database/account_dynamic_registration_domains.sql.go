// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account_dynamic_registration_domains.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createAccountDynamicRegistrationDomain = `-- name: CreateAccountDynamicRegistrationDomain :one

INSERT INTO "account_dynamic_registration_domains" (
    "account_id",
    "account_public_id",
    "domain",
    "verification_method"
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id, account_id, account_public_id, domain, verified_at, verification_method, created_at, updated_at
`

type CreateAccountDynamicRegistrationDomainParams struct {
	AccountID          int32
	AccountPublicID    uuid.UUID
	Domain             string
	VerificationMethod DomainVerificationMethod
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateAccountDynamicRegistrationDomain(ctx context.Context, arg CreateAccountDynamicRegistrationDomainParams) (AccountDynamicRegistrationDomain, error) {
	row := q.db.QueryRow(ctx, createAccountDynamicRegistrationDomain,
		arg.AccountID,
		arg.AccountPublicID,
		arg.Domain,
		arg.VerificationMethod,
	)
	var i AccountDynamicRegistrationDomain
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountPublicID,
		&i.Domain,
		&i.VerifiedAt,
		&i.VerificationMethod,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAccountDynamicRegistrationDomainByAccountPublicIDAndDomain = `-- name: FindAccountDynamicRegistrationDomainByAccountPublicIDAndDomain :one
SELECT id, account_id, account_public_id, domain, verified_at, verification_method, created_at, updated_at FROM "account_dynamic_registration_domains" WHERE "account_public_id" = $1 AND "domain" = $2 LIMIT 1
`

type FindAccountDynamicRegistrationDomainByAccountPublicIDAndDomainParams struct {
	AccountPublicID uuid.UUID
	Domain          string
}

func (q *Queries) FindAccountDynamicRegistrationDomainByAccountPublicIDAndDomain(ctx context.Context, arg FindAccountDynamicRegistrationDomainByAccountPublicIDAndDomainParams) (AccountDynamicRegistrationDomain, error) {
	row := q.db.QueryRow(ctx, findAccountDynamicRegistrationDomainByAccountPublicIDAndDomain, arg.AccountPublicID, arg.Domain)
	var i AccountDynamicRegistrationDomain
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountPublicID,
		&i.Domain,
		&i.VerifiedAt,
		&i.VerificationMethod,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
