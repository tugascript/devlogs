// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: accounts.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const confirmAccount = `-- name: ConfirmAccount :one
UPDATE "accounts" SET
    "email_verified" = true,
    "version" = "version" + 1,
    "updated_at" = now()
WHERE "id" = $1
RETURNING id, public_id, given_name, family_name, username, email, organization, password, version, email_verified, is_active, two_factor_type, created_at, updated_at
`

func (q *Queries) ConfirmAccount(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRow(ctx, confirmAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.GivenName,
		&i.FamilyName,
		&i.Username,
		&i.Email,
		&i.Organization,
		&i.Password,
		&i.Version,
		&i.EmailVerified,
		&i.IsActive,
		&i.TwoFactorType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const countAccountsByEmail = `-- name: CountAccountsByEmail :one
SELECT COUNT("id") FROM "accounts"
WHERE "email" = $1 LIMIT 1
`

func (q *Queries) CountAccountsByEmail(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRow(ctx, countAccountsByEmail, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAccountsByUsername = `-- name: CountAccountsByUsername :one
SELECT COUNT("id") FROM "accounts"
WHERE "username" = $1 LIMIT 1
`

func (q *Queries) CountAccountsByUsername(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRow(ctx, countAccountsByUsername, username)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAccountWithPassword = `-- name: CreateAccountWithPassword :one

INSERT INTO "accounts" (
    "public_id",
    "given_name",
    "family_name",
    "username",
    "email", 
    "password"
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
) RETURNING id, public_id, given_name, family_name, username, email, organization, password, version, email_verified, is_active, two_factor_type, created_at, updated_at
`

type CreateAccountWithPasswordParams struct {
	PublicID   uuid.UUID
	GivenName  string
	FamilyName string
	Username   string
	Email      string
	Password   pgtype.Text
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateAccountWithPassword(ctx context.Context, arg CreateAccountWithPasswordParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccountWithPassword,
		arg.PublicID,
		arg.GivenName,
		arg.FamilyName,
		arg.Username,
		arg.Email,
		arg.Password,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.GivenName,
		&i.FamilyName,
		&i.Username,
		&i.Email,
		&i.Organization,
		&i.Password,
		&i.Version,
		&i.EmailVerified,
		&i.IsActive,
		&i.TwoFactorType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createAccountWithoutPassword = `-- name: CreateAccountWithoutPassword :one
INSERT INTO "accounts" (
    "public_id",
    "given_name",
    "family_name",
    "username",
    "email",
    "version",
    "email_verified"
) VALUES (
    $1, 
    $2, 
    $3,
    $4,
    $5,
    2,
    true
) RETURNING id, public_id, given_name, family_name, username, email, organization, password, version, email_verified, is_active, two_factor_type, created_at, updated_at
`

type CreateAccountWithoutPasswordParams struct {
	PublicID   uuid.UUID
	GivenName  string
	FamilyName string
	Username   string
	Email      string
}

func (q *Queries) CreateAccountWithoutPassword(ctx context.Context, arg CreateAccountWithoutPasswordParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccountWithoutPassword,
		arg.PublicID,
		arg.GivenName,
		arg.FamilyName,
		arg.Username,
		arg.Email,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.GivenName,
		&i.FamilyName,
		&i.Username,
		&i.Email,
		&i.Organization,
		&i.Password,
		&i.Version,
		&i.EmailVerified,
		&i.IsActive,
		&i.TwoFactorType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM "accounts"
WHERE "id" = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const deleteAllAccounts = `-- name: DeleteAllAccounts :exec
DELETE FROM "accounts"
`

func (q *Queries) DeleteAllAccounts(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllAccounts)
	return err
}

const findAccountByEmail = `-- name: FindAccountByEmail :one
SELECT id, public_id, given_name, family_name, username, email, organization, password, version, email_verified, is_active, two_factor_type, created_at, updated_at FROM "accounts"
WHERE "email" = $1 LIMIT 1
`

func (q *Queries) FindAccountByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRow(ctx, findAccountByEmail, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.GivenName,
		&i.FamilyName,
		&i.Username,
		&i.Email,
		&i.Organization,
		&i.Password,
		&i.Version,
		&i.EmailVerified,
		&i.IsActive,
		&i.TwoFactorType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAccountById = `-- name: FindAccountById :one
SELECT id, public_id, given_name, family_name, username, email, organization, password, version, email_verified, is_active, two_factor_type, created_at, updated_at FROM "accounts"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) FindAccountById(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRow(ctx, findAccountById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.GivenName,
		&i.FamilyName,
		&i.Username,
		&i.Email,
		&i.Organization,
		&i.Password,
		&i.Version,
		&i.EmailVerified,
		&i.IsActive,
		&i.TwoFactorType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAccountByPublicID = `-- name: FindAccountByPublicID :one
SELECT id, public_id, given_name, family_name, username, email, organization, password, version, email_verified, is_active, two_factor_type, created_at, updated_at FROM "accounts"
WHERE "public_id" = $1 LIMIT 1
`

func (q *Queries) FindAccountByPublicID(ctx context.Context, publicID uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, findAccountByPublicID, publicID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.GivenName,
		&i.FamilyName,
		&i.Username,
		&i.Email,
		&i.Organization,
		&i.Password,
		&i.Version,
		&i.EmailVerified,
		&i.IsActive,
		&i.TwoFactorType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAccountByPublicIDAndVersion = `-- name: FindAccountByPublicIDAndVersion :one
SELECT id, public_id, given_name, family_name, username, email, organization, password, version, email_verified, is_active, two_factor_type, created_at, updated_at FROM "accounts"
WHERE "public_id" = $1 AND "version" = $2 LIMIT 1
`

type FindAccountByPublicIDAndVersionParams struct {
	PublicID uuid.UUID
	Version  int32
}

func (q *Queries) FindAccountByPublicIDAndVersion(ctx context.Context, arg FindAccountByPublicIDAndVersionParams) (Account, error) {
	row := q.db.QueryRow(ctx, findAccountByPublicIDAndVersion, arg.PublicID, arg.Version)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.GivenName,
		&i.FamilyName,
		&i.Username,
		&i.Email,
		&i.Organization,
		&i.Password,
		&i.Version,
		&i.EmailVerified,
		&i.IsActive,
		&i.TwoFactorType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAccountIDByPublicIDAndVersion = `-- name: FindAccountIDByPublicIDAndVersion :one
SELECT "id" FROM "accounts"
WHERE "public_id" = $1 AND "version" = $2 LIMIT 1
`

type FindAccountIDByPublicIDAndVersionParams struct {
	PublicID uuid.UUID
	Version  int32
}

func (q *Queries) FindAccountIDByPublicIDAndVersion(ctx context.Context, arg FindAccountIDByPublicIDAndVersionParams) (int32, error) {
	row := q.db.QueryRow(ctx, findAccountIDByPublicIDAndVersion, arg.PublicID, arg.Version)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const findAccountIDByUsername = `-- name: FindAccountIDByUsername :one
SELECT "id" FROM "accounts"
WHERE "username" = $1 LIMIT 1
`

func (q *Queries) FindAccountIDByUsername(ctx context.Context, username string) (int32, error) {
	row := q.db.QueryRow(ctx, findAccountIDByUsername, username)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE "accounts" SET
    "given_name" = $1,
    "family_name" = $2,
    "updated_at" = now()
WHERE "id" = $3
RETURNING id, public_id, given_name, family_name, username, email, organization, password, version, email_verified, is_active, two_factor_type, created_at, updated_at
`

type UpdateAccountParams struct {
	GivenName  string
	FamilyName string
	ID         int32
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccount, arg.GivenName, arg.FamilyName, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.GivenName,
		&i.FamilyName,
		&i.Username,
		&i.Email,
		&i.Organization,
		&i.Password,
		&i.Version,
		&i.EmailVerified,
		&i.IsActive,
		&i.TwoFactorType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAccountEmail = `-- name: UpdateAccountEmail :one
UPDATE "accounts" SET
    "email" = $1,
    "version" = "version" + 1,
    "updated_at" = now()
WHERE "id" = $2
RETURNING id, public_id, given_name, family_name, username, email, organization, password, version, email_verified, is_active, two_factor_type, created_at, updated_at
`

type UpdateAccountEmailParams struct {
	Email string
	ID    int32
}

func (q *Queries) UpdateAccountEmail(ctx context.Context, arg UpdateAccountEmailParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccountEmail, arg.Email, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.GivenName,
		&i.FamilyName,
		&i.Username,
		&i.Email,
		&i.Organization,
		&i.Password,
		&i.Version,
		&i.EmailVerified,
		&i.IsActive,
		&i.TwoFactorType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAccountPassword = `-- name: UpdateAccountPassword :one
UPDATE "accounts" SET
    "password" = $1,
    "version" = "version" + 1,
    "updated_at" = now()
WHERE "id" = $2
RETURNING id, public_id, given_name, family_name, username, email, organization, password, version, email_verified, is_active, two_factor_type, created_at, updated_at
`

type UpdateAccountPasswordParams struct {
	Password pgtype.Text
	ID       int32
}

func (q *Queries) UpdateAccountPassword(ctx context.Context, arg UpdateAccountPasswordParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccountPassword, arg.Password, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.GivenName,
		&i.FamilyName,
		&i.Username,
		&i.Email,
		&i.Organization,
		&i.Password,
		&i.Version,
		&i.EmailVerified,
		&i.IsActive,
		&i.TwoFactorType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAccountTwoFactorType = `-- name: UpdateAccountTwoFactorType :exec
UPDATE "accounts" SET
    "two_factor_type" = $1,
    "version" = "version" + 1,
    "updated_at" = now()
WHERE "id" = $2
`

type UpdateAccountTwoFactorTypeParams struct {
	TwoFactorType TwoFactorType
	ID            int32
}

func (q *Queries) UpdateAccountTwoFactorType(ctx context.Context, arg UpdateAccountTwoFactorTypeParams) error {
	_, err := q.db.Exec(ctx, updateAccountTwoFactorType, arg.TwoFactorType, arg.ID)
	return err
}

const updateAccountUsername = `-- name: UpdateAccountUsername :one
UPDATE "accounts" SET
    "username" = $1,
    "version" = "version" + 1,
    "updated_at" = now()
WHERE "id" = $2
RETURNING id, public_id, given_name, family_name, username, email, organization, password, version, email_verified, is_active, two_factor_type, created_at, updated_at
`

type UpdateAccountUsernameParams struct {
	Username string
	ID       int32
}

func (q *Queries) UpdateAccountUsername(ctx context.Context, arg UpdateAccountUsernameParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccountUsername, arg.Username, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.GivenName,
		&i.FamilyName,
		&i.Username,
		&i.Email,
		&i.Organization,
		&i.Password,
		&i.Version,
		&i.EmailVerified,
		&i.IsActive,
		&i.TwoFactorType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
