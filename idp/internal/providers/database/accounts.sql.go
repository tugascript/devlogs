// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: accounts.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const confirmAccount = `-- name: ConfirmAccount :one
UPDATE "accounts" SET
    "is_confirmed" = true,
    "version" = "version" + 1,
    "updated_at" = now()
WHERE "id" = $1
RETURNING id, first_name, last_name, username, email, dek, password, version, is_confirmed, two_factor_type, created_at, updated_at
`

func (q *Queries) ConfirmAccount(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRow(ctx, confirmAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Dek,
		&i.Password,
		&i.Version,
		&i.IsConfirmed,
		&i.TwoFactorType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const countAccountByUsername = `-- name: CountAccountByUsername :one
SELECT COUNT("id") FROM "accounts"
WHERE "username" = $1 LIMIT 1
`

func (q *Queries) CountAccountByUsername(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRow(ctx, countAccountByUsername, username)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAccountWithPassword = `-- name: CreateAccountWithPassword :one

INSERT INTO "accounts" (
    "first_name",
    "last_name",
    "username",
    "email", 
    "password",
    "dek"
) VALUES (
    $1, 
    $2, 
    $3,
    $4,
    $5,
    $6
) RETURNING id, first_name, last_name, username, email, dek, password, version, is_confirmed, two_factor_type, created_at, updated_at
`

type CreateAccountWithPasswordParams struct {
	FirstName string
	LastName  string
	Username  string
	Email     string
	Password  pgtype.Text
	Dek       string
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateAccountWithPassword(ctx context.Context, arg CreateAccountWithPasswordParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccountWithPassword,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Dek,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Dek,
		&i.Password,
		&i.Version,
		&i.IsConfirmed,
		&i.TwoFactorType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createAccountWithoutPassword = `-- name: CreateAccountWithoutPassword :one
INSERT INTO "accounts" (
    "first_name",
    "last_name",
    "username",
    "email",
    "dek",
    "version",
    "is_confirmed"
) VALUES (
    $1, 
    $2, 
    $3,
    $4,
    $5,
    2,
    true
) RETURNING id, first_name, last_name, username, email, dek, password, version, is_confirmed, two_factor_type, created_at, updated_at
`

type CreateAccountWithoutPasswordParams struct {
	FirstName string
	LastName  string
	Username  string
	Email     string
	Dek       string
}

func (q *Queries) CreateAccountWithoutPassword(ctx context.Context, arg CreateAccountWithoutPasswordParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccountWithoutPassword,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.Email,
		arg.Dek,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Dek,
		&i.Password,
		&i.Version,
		&i.IsConfirmed,
		&i.TwoFactorType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM "accounts"
WHERE "id" = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const deleteAllAccounts = `-- name: DeleteAllAccounts :exec
DELETE FROM "accounts"
`

func (q *Queries) DeleteAllAccounts(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllAccounts)
	return err
}

const findAccountByEmail = `-- name: FindAccountByEmail :one
SELECT id, first_name, last_name, username, email, dek, password, version, is_confirmed, two_factor_type, created_at, updated_at FROM "accounts"
WHERE "email" = $1 LIMIT 1
`

func (q *Queries) FindAccountByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRow(ctx, findAccountByEmail, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Dek,
		&i.Password,
		&i.Version,
		&i.IsConfirmed,
		&i.TwoFactorType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAccountById = `-- name: FindAccountById :one
SELECT id, first_name, last_name, username, email, dek, password, version, is_confirmed, two_factor_type, created_at, updated_at FROM "accounts"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) FindAccountById(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRow(ctx, findAccountById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Dek,
		&i.Password,
		&i.Version,
		&i.IsConfirmed,
		&i.TwoFactorType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountIDByUsername = `-- name: GetAccountIDByUsername :one
SELECT "id" FROM "accounts"
WHERE "username" = $1 LIMIT 1
`

func (q *Queries) GetAccountIDByUsername(ctx context.Context, username string) (int32, error) {
	row := q.db.QueryRow(ctx, getAccountIDByUsername, username)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE "accounts" SET
    "first_name" = $1,
    "last_name" = $2,
    "username" = $3,
    "updated_at" = now()
WHERE "id" = $4
RETURNING id, first_name, last_name, username, email, dek, password, version, is_confirmed, two_factor_type, created_at, updated_at
`

type UpdateAccountParams struct {
	FirstName string
	LastName  string
	Username  string
	ID        int32
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccount,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.ID,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Dek,
		&i.Password,
		&i.Version,
		&i.IsConfirmed,
		&i.TwoFactorType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAccountDEK = `-- name: UpdateAccountDEK :exec
UPDATE "accounts" SET
    "dek" = $1,
    "updated_at" = now()
WHERE "id" = $2
`

type UpdateAccountDEKParams struct {
	Dek string
	ID  int32
}

func (q *Queries) UpdateAccountDEK(ctx context.Context, arg UpdateAccountDEKParams) error {
	_, err := q.db.Exec(ctx, updateAccountDEK, arg.Dek, arg.ID)
	return err
}

const updateAccountEmail = `-- name: UpdateAccountEmail :one
UPDATE "accounts" SET
    "email" = $1,
    "version" = "version" + 1,
    "updated_at" = now()
WHERE "id" = $2
RETURNING id, first_name, last_name, username, email, dek, password, version, is_confirmed, two_factor_type, created_at, updated_at
`

type UpdateAccountEmailParams struct {
	Email string
	ID    int32
}

func (q *Queries) UpdateAccountEmail(ctx context.Context, arg UpdateAccountEmailParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccountEmail, arg.Email, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Dek,
		&i.Password,
		&i.Version,
		&i.IsConfirmed,
		&i.TwoFactorType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAccountPassword = `-- name: UpdateAccountPassword :one
UPDATE "accounts" SET
    "password" = $1,
    "version" = "version" + 1,
    "updated_at" = now()
WHERE "id" = $2
RETURNING id, first_name, last_name, username, email, dek, password, version, is_confirmed, two_factor_type, created_at, updated_at
`

type UpdateAccountPasswordParams struct {
	Password pgtype.Text
	ID       int32
}

func (q *Queries) UpdateAccountPassword(ctx context.Context, arg UpdateAccountPasswordParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccountPassword, arg.Password, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Dek,
		&i.Password,
		&i.Version,
		&i.IsConfirmed,
		&i.TwoFactorType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAccountTwoFactorType = `-- name: UpdateAccountTwoFactorType :one
UPDATE "accounts" SET
    "two_factor_type" = $1,
    "version" = "version" + 1,
    "updated_at" = now()
WHERE "id" = $2
RETURNING id, first_name, last_name, username, email, dek, password, version, is_confirmed, two_factor_type, created_at, updated_at
`

type UpdateAccountTwoFactorTypeParams struct {
	TwoFactorType string
	ID            int32
}

func (q *Queries) UpdateAccountTwoFactorType(ctx context.Context, arg UpdateAccountTwoFactorTypeParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccountTwoFactorType, arg.TwoFactorType, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Dek,
		&i.Password,
		&i.Version,
		&i.IsConfirmed,
		&i.TwoFactorType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
