// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: credentials_secrets.sql

package database

import (
	"context"
	"time"
)

const createCredentialsSecret = `-- name: CreateCredentialsSecret :one

INSERT INTO "credentials_secrets" (
    "account_id",
    "secret_id",
    "client_secret",
    "expires_at",
    "usage"
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING id, secret_id, client_secret, is_revoked, usage, account_id, expires_at, created_at, updated_at
`

type CreateCredentialsSecretParams struct {
	AccountID    int32
	SecretID     string
	ClientSecret string
	ExpiresAt    time.Time
	Usage        CredentialsUsage
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateCredentialsSecret(ctx context.Context, arg CreateCredentialsSecretParams) (CredentialsSecret, error) {
	row := q.db.QueryRow(ctx, createCredentialsSecret,
		arg.AccountID,
		arg.SecretID,
		arg.ClientSecret,
		arg.ExpiresAt,
		arg.Usage,
	)
	var i CredentialsSecret
	err := row.Scan(
		&i.ID,
		&i.SecretID,
		&i.ClientSecret,
		&i.IsRevoked,
		&i.Usage,
		&i.AccountID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllCredentialsSecrets = `-- name: DeleteAllCredentialsSecrets :exec
DELETE FROM "credentials_secrets"
`

func (q *Queries) DeleteAllCredentialsSecrets(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllCredentialsSecrets)
	return err
}

const revokeCredentialsSecret = `-- name: RevokeCredentialsSecret :one
UPDATE "credentials_secrets" SET
    "is_revoked" = true,
    "updated_at" = now()
WHERE "id" = $1
RETURNING id, secret_id, client_secret, is_revoked, usage, account_id, expires_at, created_at, updated_at
`

func (q *Queries) RevokeCredentialsSecret(ctx context.Context, id int32) (CredentialsSecret, error) {
	row := q.db.QueryRow(ctx, revokeCredentialsSecret, id)
	var i CredentialsSecret
	err := row.Scan(
		&i.ID,
		&i.SecretID,
		&i.ClientSecret,
		&i.IsRevoked,
		&i.Usage,
		&i.AccountID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCredentialsSecretExpiresAtAndCreatedAt = `-- name: UpdateCredentialsSecretExpiresAtAndCreatedAt :exec
UPDATE "credentials_secrets" SET
    "expires_at" = $2,
    "created_at" = $3,
    "updated_at" = now()
WHERE "secret_id" = $1
`

type UpdateCredentialsSecretExpiresAtAndCreatedAtParams struct {
	SecretID  string
	ExpiresAt time.Time
	CreatedAt time.Time
}

func (q *Queries) UpdateCredentialsSecretExpiresAtAndCreatedAt(ctx context.Context, arg UpdateCredentialsSecretExpiresAtAndCreatedAtParams) error {
	_, err := q.db.Exec(ctx, updateCredentialsSecretExpiresAtAndCreatedAt, arg.SecretID, arg.ExpiresAt, arg.CreatedAt)
	return err
}
