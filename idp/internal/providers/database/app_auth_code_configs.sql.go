// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: app_auth_code_configs.sql

package database

import (
	"context"
)

const createAppAuthCodeConfig = `-- name: CreateAppAuthCodeConfig :one

INSERT INTO "app_auth_code_configs" (
    "account_id",
    "app_id",
    "callback_uris",
    "logout_uris",
    "allowed_origins",
    "code_challenge_method"
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
) RETURNING id, account_id, app_id, callback_uris, logout_uris, allowed_origins, code_challenge_method, created_at, updated_at
`

type CreateAppAuthCodeConfigParams struct {
	AccountID           int32
	AppID               int32
	CallbackUris        []string
	LogoutUris          []string
	AllowedOrigins      []string
	CodeChallengeMethod CodeChallengeMethod
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateAppAuthCodeConfig(ctx context.Context, arg CreateAppAuthCodeConfigParams) (AppAuthCodeConfig, error) {
	row := q.db.QueryRow(ctx, createAppAuthCodeConfig,
		arg.AccountID,
		arg.AppID,
		arg.CallbackUris,
		arg.LogoutUris,
		arg.AllowedOrigins,
		arg.CodeChallengeMethod,
	)
	var i AppAuthCodeConfig
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AppID,
		&i.CallbackUris,
		&i.LogoutUris,
		&i.AllowedOrigins,
		&i.CodeChallengeMethod,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAppAuthCodeConfig = `-- name: FindAppAuthCodeConfig :one
SELECT id, account_id, app_id, callback_uris, logout_uris, allowed_origins, code_challenge_method, created_at, updated_at FROM "app_auth_code_configs"
WHERE "app_id" = $1 LIMIT 1
`

func (q *Queries) FindAppAuthCodeConfig(ctx context.Context, appID int32) (AppAuthCodeConfig, error) {
	row := q.db.QueryRow(ctx, findAppAuthCodeConfig, appID)
	var i AppAuthCodeConfig
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AppID,
		&i.CallbackUris,
		&i.LogoutUris,
		&i.AllowedOrigins,
		&i.CodeChallengeMethod,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAppAuthCodeConfig = `-- name: UpdateAppAuthCodeConfig :one
UPDATE "app_auth_code_configs" SET
    "callback_uris" = $3,
    "logout_uris" = $4,
    "allowed_origins" = $5,
    "code_challenge_method" = $6
WHERE "account_id" = $1 AND "app_id" = $2
RETURNING id, account_id, app_id, callback_uris, logout_uris, allowed_origins, code_challenge_method, created_at, updated_at
`

type UpdateAppAuthCodeConfigParams struct {
	AccountID           int32
	AppID               int32
	CallbackUris        []string
	LogoutUris          []string
	AllowedOrigins      []string
	CodeChallengeMethod CodeChallengeMethod
}

func (q *Queries) UpdateAppAuthCodeConfig(ctx context.Context, arg UpdateAppAuthCodeConfigParams) (AppAuthCodeConfig, error) {
	row := q.db.QueryRow(ctx, updateAppAuthCodeConfig,
		arg.AccountID,
		arg.AppID,
		arg.CallbackUris,
		arg.LogoutUris,
		arg.AllowedOrigins,
		arg.CodeChallengeMethod,
	)
	var i AppAuthCodeConfig
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AppID,
		&i.CallbackUris,
		&i.LogoutUris,
		&i.AllowedOrigins,
		&i.CodeChallengeMethod,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
