// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account_totps.sql

package database

import (
	"context"
)

const createAccountTotp = `-- name: CreateAccountTotp :exec

INSERT INTO "account_totps" (
  "account_id",
  "totp_id"
) VALUES (
  $1,
  $2
)
`

type CreateAccountTotpParams struct {
	AccountID int32
	TotpID    int32
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateAccountTotp(ctx context.Context, arg CreateAccountTotpParams) error {
	_, err := q.db.Exec(ctx, createAccountTotp, arg.AccountID, arg.TotpID)
	return err
}

const deleteAccountRecoveryKeys = `-- name: DeleteAccountRecoveryKeys :exec
DELETE FROM "account_totps"
WHERE "account_id" = $1
`

func (q *Queries) DeleteAccountRecoveryKeys(ctx context.Context, accountID int32) error {
	_, err := q.db.Exec(ctx, deleteAccountRecoveryKeys, accountID)
	return err
}

const findAccountTotpByAccountID = `-- name: FindAccountTotpByAccountID :one
SELECT t.id, t.dek_kid, t.url, t.secret, t.recovery_codes, t.usage, t.account_id, t.created_at, t.updated_at FROM "totps" AS "t"
LEFT JOIN "account_totps" AS "at" ON "at"."totp_id" = "t"."id"
WHERE
    "at"."account_id" = $1
LIMIT 1
`

func (q *Queries) FindAccountTotpByAccountID(ctx context.Context, accountID int32) (Totp, error) {
	row := q.db.QueryRow(ctx, findAccountTotpByAccountID, accountID)
	var i Totp
	err := row.Scan(
		&i.ID,
		&i.DekKid,
		&i.Url,
		&i.Secret,
		&i.RecoveryCodes,
		&i.Usage,
		&i.AccountID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
