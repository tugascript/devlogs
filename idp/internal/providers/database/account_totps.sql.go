// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account_totps.sql

package database

import (
	"context"
)

const createAccountTotps = `-- name: CreateAccountTotps :exec

INSERT INTO "account_totps" (
  "account_id",
  "url",
  "secret",
  "recovery_codes"
) VALUES (
  $1,
  $2,
  $3,
  $4
)
`

type CreateAccountTotpsParams struct {
	AccountID     int32
	Url           string
	Secret        string
	RecoveryCodes []byte
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateAccountTotps(ctx context.Context, arg CreateAccountTotpsParams) error {
	_, err := q.db.Exec(ctx, createAccountTotps,
		arg.AccountID,
		arg.Url,
		arg.Secret,
		arg.RecoveryCodes,
	)
	return err
}

const deleteAccountRecoveryKeys = `-- name: DeleteAccountRecoveryKeys :exec
DELETE FROM "account_totps"
WHERE "account_id" = $1
`

func (q *Queries) DeleteAccountRecoveryKeys(ctx context.Context, accountID int32) error {
	_, err := q.db.Exec(ctx, deleteAccountRecoveryKeys, accountID)
	return err
}

const findAccountTotpByAccountID = `-- name: FindAccountTotpByAccountID :one
SELECT id, account_id, url, secret, recovery_codes, created_at, updated_at FROM "account_totps"
WHERE "account_id" = $1 LIMIT 1
`

func (q *Queries) FindAccountTotpByAccountID(ctx context.Context, accountID int32) (AccountTotp, error) {
	row := q.db.QueryRow(ctx, findAccountTotpByAccountID, accountID)
	var i AccountTotp
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Url,
		&i.Secret,
		&i.RecoveryCodes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAccountTotp = `-- name: UpdateAccountTotp :exec
UPDATE "account_totps" SET
  "url" = $2,
  "secret" = $3,
  "recovery_codes" = $4
WHERE "id" = $1
`

type UpdateAccountTotpParams struct {
	ID            int32
	Url           string
	Secret        string
	RecoveryCodes []byte
}

func (q *Queries) UpdateAccountTotp(ctx context.Context, arg UpdateAccountTotpParams) error {
	_, err := q.db.Exec(ctx, updateAccountTotp,
		arg.ID,
		arg.Url,
		arg.Secret,
		arg.RecoveryCodes,
	)
	return err
}
