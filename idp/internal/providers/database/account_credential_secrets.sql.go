// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account_credential_secrets.sql

package database

import (
	"context"
)

const countAccountCredentialSecretsByAccountCredentialID = `-- name: CountAccountCredentialSecretsByAccountCredentialID :one
SELECT COUNT("csr"."id") FROM "credentials_secrets" "csr"
LEFT JOIN "account_credentials_secrets" "acs" ON "acs"."credentials_secret_id" = "csr"."id"
WHERE "acs"."account_credentials_id" = $1
LIMIT 1
`

func (q *Queries) CountAccountCredentialSecretsByAccountCredentialID(ctx context.Context, accountCredentialsID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countAccountCredentialSecretsByAccountCredentialID, accountCredentialsID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAccountCredentialSecret = `-- name: CreateAccountCredentialSecret :exec

INSERT INTO "account_credentials_secrets" (
    "account_credentials_id",
    "credentials_secret_id",
    "account_id"
) VALUES (
    $1,
    $2,
    $3
)
`

type CreateAccountCredentialSecretParams struct {
	AccountCredentialsID int32
	CredentialsSecretID  int32
	AccountID            int32
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateAccountCredentialSecret(ctx context.Context, arg CreateAccountCredentialSecretParams) error {
	_, err := q.db.Exec(ctx, createAccountCredentialSecret, arg.AccountCredentialsID, arg.CredentialsSecretID, arg.AccountID)
	return err
}

const findAccountCredentialSecretByAccountCredentialIDAndCredentialsSecretID = `-- name: FindAccountCredentialSecretByAccountCredentialIDAndCredentialsSecretID :one
SELECT csr.id, csr.account_id, csr.secret_id, csr.client_secret, csr.is_revoked, csr.expires_at, csr.created_at, csr.updated_at FROM "credentials_secrets" "csr"
LEFT JOIN "account_credentials_secrets" "acs" ON "acs"."credentials_secret_id" = "csr"."id"
WHERE 
    "acs"."account_credentials_id" = $1 AND 
    "csr"."secret_id" = $2
LIMIT 1
`

type FindAccountCredentialSecretByAccountCredentialIDAndCredentialsSecretIDParams struct {
	AccountCredentialsID int32
	SecretID             string
}

func (q *Queries) FindAccountCredentialSecretByAccountCredentialIDAndCredentialsSecretID(ctx context.Context, arg FindAccountCredentialSecretByAccountCredentialIDAndCredentialsSecretIDParams) (CredentialsSecret, error) {
	row := q.db.QueryRow(ctx, findAccountCredentialSecretByAccountCredentialIDAndCredentialsSecretID, arg.AccountCredentialsID, arg.SecretID)
	var i CredentialsSecret
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.SecretID,
		&i.ClientSecret,
		&i.IsRevoked,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findCurrentAccountCredentialSecretByAccountCredentialID = `-- name: FindCurrentAccountCredentialSecretByAccountCredentialID :one
SELECT csr.id, csr.account_id, csr.secret_id, csr.client_secret, csr.is_revoked, csr.expires_at, csr.created_at, csr.updated_at FROM "credentials_secrets" "csr"
LEFT JOIN "account_credentials_secrets" "acs" ON "acs"."credentials_secret_id" = "csr"."id"
WHERE 
    "acs"."account_credentials_id" = $1 AND 
    "csr"."is_revoked" = false AND 
    "csr"."expires_at" > now()
LIMIT 1
`

func (q *Queries) FindCurrentAccountCredentialSecretByAccountCredentialID(ctx context.Context, accountCredentialsID int32) (CredentialsSecret, error) {
	row := q.db.QueryRow(ctx, findCurrentAccountCredentialSecretByAccountCredentialID, accountCredentialsID)
	var i CredentialsSecret
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.SecretID,
		&i.ClientSecret,
		&i.IsRevoked,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findPaginatedAccountCredentialSecretsByAccountCredentialID = `-- name: FindPaginatedAccountCredentialSecretsByAccountCredentialID :many
SELECT csr.id, csr.account_id, csr.secret_id, csr.client_secret, csr.is_revoked, csr.expires_at, csr.created_at, csr.updated_at FROM "credentials_secrets" "csr"
LEFT JOIN "account_credentials_secrets" "acs" ON "acs"."credentials_secret_id" = "csr"."id"
WHERE "acs"."account_credentials_id" = $1
ORDER BY "csr"."expires_at" DESC
OFFSET $2 LIMIT $3
`

type FindPaginatedAccountCredentialSecretsByAccountCredentialIDParams struct {
	AccountCredentialsID int32
	Offset               int32
	Limit                int32
}

func (q *Queries) FindPaginatedAccountCredentialSecretsByAccountCredentialID(ctx context.Context, arg FindPaginatedAccountCredentialSecretsByAccountCredentialIDParams) ([]CredentialsSecret, error) {
	rows, err := q.db.Query(ctx, findPaginatedAccountCredentialSecretsByAccountCredentialID, arg.AccountCredentialsID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CredentialsSecret{}
	for rows.Next() {
		var i CredentialsSecret
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.SecretID,
			&i.ClientSecret,
			&i.IsRevoked,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeAccountCredentialSecret = `-- name: RevokeAccountCredentialSecret :exec
UPDATE "credentials_secrets" SET
    "is_revoked" = true
WHERE "id" = $1
`

func (q *Queries) RevokeAccountCredentialSecret(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, revokeAccountCredentialSecret, id)
	return err
}
