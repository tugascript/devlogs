// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account_hmac_secrets.sql

package database

import (
	"context"
	"time"
)

const createAccountHMACSecret = `-- name: CreateAccountHMACSecret :one

INSERT INTO "account_hmac_secrets" (
    "account_id",
    "secret_id",
    "secret",
    "dek_kid",
    "expires_at"
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING "id"
`

type CreateAccountHMACSecretParams struct {
	AccountID int32
	SecretID  string
	Secret    string
	DekKid    string
	ExpiresAt time.Time
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateAccountHMACSecret(ctx context.Context, arg CreateAccountHMACSecretParams) (int32, error) {
	row := q.db.QueryRow(ctx, createAccountHMACSecret,
		arg.AccountID,
		arg.SecretID,
		arg.Secret,
		arg.DekKid,
		arg.ExpiresAt,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const findAccountHMACSecretByAccountIDAndSecretID = `-- name: FindAccountHMACSecretByAccountIDAndSecretID :one
SELECT id, account_id, secret_id, secret, dek_kid, is_revoked, expires_at, created_at FROM "account_hmac_secrets"
WHERE "account_id" = $1 AND "secret_id" = $2
LIMIT 1
`

type FindAccountHMACSecretByAccountIDAndSecretIDParams struct {
	AccountID int32
	SecretID  string
}

func (q *Queries) FindAccountHMACSecretByAccountIDAndSecretID(ctx context.Context, arg FindAccountHMACSecretByAccountIDAndSecretIDParams) (AccountHmacSecret, error) {
	row := q.db.QueryRow(ctx, findAccountHMACSecretByAccountIDAndSecretID, arg.AccountID, arg.SecretID)
	var i AccountHmacSecret
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.SecretID,
		&i.Secret,
		&i.DekKid,
		&i.IsRevoked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const findValidHMACSecretByAccountID = `-- name: FindValidHMACSecretByAccountID :one
SELECT id, account_id, secret_id, secret, dek_kid, is_revoked, expires_at, created_at FROM "account_hmac_secrets"
WHERE
    "account_id" = $1 AND
    "is_revoked" = false AND
    "expires_at" > now()
LIMIT 1
`

func (q *Queries) FindValidHMACSecretByAccountID(ctx context.Context, accountID int32) (AccountHmacSecret, error) {
	row := q.db.QueryRow(ctx, findValidHMACSecretByAccountID, accountID)
	var i AccountHmacSecret
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.SecretID,
		&i.Secret,
		&i.DekKid,
		&i.IsRevoked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateAccountHMACSecret = `-- name: UpdateAccountHMACSecret :exec
UPDATE "account_hmac_secrets" SET
    "secret" = $2,
    "dek_kid" = $3,
    "updated_at" = now()
WHERE "id" = $1
`

type UpdateAccountHMACSecretParams struct {
	ID     int32
	Secret string
	DekKid string
}

func (q *Queries) UpdateAccountHMACSecret(ctx context.Context, arg UpdateAccountHMACSecretParams) error {
	_, err := q.db.Exec(ctx, updateAccountHMACSecret, arg.ID, arg.Secret, arg.DekKid)
	return err
}
