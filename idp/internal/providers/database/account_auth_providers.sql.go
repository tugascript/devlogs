// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account_auth_providers.sql

package database

import (
	"context"
)

const createAccountAuthProvider = `-- name: CreateAccountAuthProvider :exec

INSERT INTO "account_auth_providers" (
  "email",
  "provider"
) VALUES (
  $1,
  $2
)
`

type CreateAccountAuthProviderParams struct {
	Email    string
	Provider AuthProvider
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateAccountAuthProvider(ctx context.Context, arg CreateAccountAuthProviderParams) error {
	_, err := q.db.Exec(ctx, createAccountAuthProvider, arg.Email, arg.Provider)
	return err
}

const deleteAccountAuthProviders = `-- name: DeleteAccountAuthProviders :exec
DELETE FROM "account_auth_providers"
WHERE 
  "email" = $1 AND 
  "provider" != $2
`

type DeleteAccountAuthProvidersParams struct {
	Email    string
	Provider AuthProvider
}

func (q *Queries) DeleteAccountAuthProviders(ctx context.Context, arg DeleteAccountAuthProvidersParams) error {
	_, err := q.db.Exec(ctx, deleteAccountAuthProviders, arg.Email, arg.Provider)
	return err
}

const findAccountAuthProviderByEmailAndProvider = `-- name: FindAccountAuthProviderByEmailAndProvider :one
SELECT id, email, provider, expires_at, created_at, updated_at FROM "account_auth_providers"
WHERE 
  "email" = $1 AND 
  "provider" = $2
LIMIT 1
`

type FindAccountAuthProviderByEmailAndProviderParams struct {
	Email    string
	Provider AuthProvider
}

func (q *Queries) FindAccountAuthProviderByEmailAndProvider(ctx context.Context, arg FindAccountAuthProviderByEmailAndProviderParams) (AccountAuthProvider, error) {
	row := q.db.QueryRow(ctx, findAccountAuthProviderByEmailAndProvider, arg.Email, arg.Provider)
	var i AccountAuthProvider
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Provider,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
