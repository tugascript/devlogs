// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account_auth_providers.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const countAccountAuthProvidersByEmailAndProvider = `-- name: CountAccountAuthProvidersByEmailAndProvider :one
SELECT COUNT("id") FROM "account_auth_providers"
WHERE
  "email" = $1 AND
  "provider" = $2
LIMIT 1
`

type CountAccountAuthProvidersByEmailAndProviderParams struct {
	Email    string
	Provider AuthProvider
}

func (q *Queries) CountAccountAuthProvidersByEmailAndProvider(ctx context.Context, arg CountAccountAuthProvidersByEmailAndProviderParams) (int64, error) {
	row := q.db.QueryRow(ctx, countAccountAuthProvidersByEmailAndProvider, arg.Email, arg.Provider)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAccountAuthProvider = `-- name: CreateAccountAuthProvider :exec

INSERT INTO "account_auth_providers" (
  "email",
  "account_public_id",
  "provider"
) VALUES (
  $1,
  $2,
  $3
)
`

type CreateAccountAuthProviderParams struct {
	Email           string
	AccountPublicID uuid.UUID
	Provider        AuthProvider
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateAccountAuthProvider(ctx context.Context, arg CreateAccountAuthProviderParams) error {
	_, err := q.db.Exec(ctx, createAccountAuthProvider, arg.Email, arg.AccountPublicID, arg.Provider)
	return err
}

const deleteExternalAccountAuthProviders = `-- name: DeleteExternalAccountAuthProviders :exec
DELETE FROM "account_auth_providers"
WHERE 
  "email" = $1 AND 
  "provider" != 'username_password'
`

func (q *Queries) DeleteExternalAccountAuthProviders(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, deleteExternalAccountAuthProviders, email)
	return err
}

const findAccountAuthProviderByAccountPublicIdAndProvider = `-- name: FindAccountAuthProviderByAccountPublicIdAndProvider :one
SELECT id, email, provider, account_public_id, created_at, updated_at FROM "account_auth_providers"
WHERE
  "account_public_id" = $1 AND
  "provider" = $2
LIMIT 1
`

type FindAccountAuthProviderByAccountPublicIdAndProviderParams struct {
	AccountPublicID uuid.UUID
	Provider        AuthProvider
}

func (q *Queries) FindAccountAuthProviderByAccountPublicIdAndProvider(ctx context.Context, arg FindAccountAuthProviderByAccountPublicIdAndProviderParams) (AccountAuthProvider, error) {
	row := q.db.QueryRow(ctx, findAccountAuthProviderByAccountPublicIdAndProvider, arg.AccountPublicID, arg.Provider)
	var i AccountAuthProvider
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Provider,
		&i.AccountPublicID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAccountAuthProviderByEmailAndProvider = `-- name: FindAccountAuthProviderByEmailAndProvider :one
SELECT id, email, provider, account_public_id, created_at, updated_at FROM "account_auth_providers"
WHERE 
  "email" = $1 AND 
  "provider" = $2
LIMIT 1
`

type FindAccountAuthProviderByEmailAndProviderParams struct {
	Email    string
	Provider AuthProvider
}

func (q *Queries) FindAccountAuthProviderByEmailAndProvider(ctx context.Context, arg FindAccountAuthProviderByEmailAndProviderParams) (AccountAuthProvider, error) {
	row := q.db.QueryRow(ctx, findAccountAuthProviderByEmailAndProvider, arg.Email, arg.Provider)
	var i AccountAuthProvider
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Provider,
		&i.AccountPublicID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAccountAuthProvidersByAccountPublicId = `-- name: FindAccountAuthProvidersByAccountPublicId :many
SELECT id, email, provider, account_public_id, created_at, updated_at FROM "account_auth_providers"
WHERE
  "account_public_id" = $1
ORDER BY "id" DESC
`

func (q *Queries) FindAccountAuthProvidersByAccountPublicId(ctx context.Context, accountPublicID uuid.UUID) ([]AccountAuthProvider, error) {
	rows, err := q.db.Query(ctx, findAccountAuthProvidersByAccountPublicId, accountPublicID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AccountAuthProvider{}
	for rows.Next() {
		var i AccountAuthProvider
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Provider,
			&i.AccountPublicID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
