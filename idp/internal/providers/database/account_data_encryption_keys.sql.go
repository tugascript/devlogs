// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account_data_encryption_keys.sql

package database

import (
	"context"
	"time"
)

const createAccountDataEncryptionKey = `-- name: CreateAccountDataEncryptionKey :exec

INSERT INTO "account_data_encryption_keys" (
    "account_id",
    "data_encryption_key_id"
) VALUES (
    $1,
    $2
)
`

type CreateAccountDataEncryptionKeyParams struct {
	AccountID           int32
	DataEncryptionKeyID int32
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateAccountDataEncryptionKey(ctx context.Context, arg CreateAccountDataEncryptionKeyParams) error {
	_, err := q.db.Exec(ctx, createAccountDataEncryptionKey, arg.AccountID, arg.DataEncryptionKeyID)
	return err
}

const findAccountDataEncryptionKeyByAccountID = `-- name: FindAccountDataEncryptionKeyByAccountID :one
SELECT d.id, d.kid, d.dek, d.kek_kid, d.usage, d.is_revoked, d.expires_at, d.created_at, d.updated_at FROM "data_encryption_keys" AS "d"
LEFT JOIN "account_data_encryption_keys" AS "adek" ON "d"."id" = "adek"."data_encryption_key_id"
WHERE "adek"."account_id" = $1 AND "d"."expires_at" > $2
LIMIT 1
`

type FindAccountDataEncryptionKeyByAccountIDParams struct {
	AccountID int32
	ExpiresAt time.Time
}

func (q *Queries) FindAccountDataEncryptionKeyByAccountID(ctx context.Context, arg FindAccountDataEncryptionKeyByAccountIDParams) (DataEncryptionKey, error) {
	row := q.db.QueryRow(ctx, findAccountDataEncryptionKeyByAccountID, arg.AccountID, arg.ExpiresAt)
	var i DataEncryptionKey
	err := row.Scan(
		&i.ID,
		&i.Kid,
		&i.Dek,
		&i.KekKid,
		&i.Usage,
		&i.IsRevoked,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAccountDataEncryptionKeyByAccountIDAndKID = `-- name: FindAccountDataEncryptionKeyByAccountIDAndKID :one
SELECT d.id, d.kid, d.dek, d.kek_kid, d.usage, d.is_revoked, d.expires_at, d.created_at, d.updated_at FROM "data_encryption_keys" AS "d"
LEFT JOIN "account_data_encryption_keys" AS "adek" ON "d"."id" = "adek"."data_encryption_key_id"
WHERE "adek"."account_id" = $1 AND "d"."kid" = $2
LIMIT 1
`

type FindAccountDataEncryptionKeyByAccountIDAndKIDParams struct {
	AccountID int32
	Kid       string
}

func (q *Queries) FindAccountDataEncryptionKeyByAccountIDAndKID(ctx context.Context, arg FindAccountDataEncryptionKeyByAccountIDAndKIDParams) (DataEncryptionKey, error) {
	row := q.db.QueryRow(ctx, findAccountDataEncryptionKeyByAccountIDAndKID, arg.AccountID, arg.Kid)
	var i DataEncryptionKey
	err := row.Scan(
		&i.ID,
		&i.Kid,
		&i.Dek,
		&i.KekKid,
		&i.Usage,
		&i.IsRevoked,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
