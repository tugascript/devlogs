// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: external_auth_providers.sql

package database

import (
	"context"
)

const createExternalAuthProvider = `-- name: CreateExternalAuthProvider :one

INSERT INTO external_auth_providers (
  name,
  provider,
  icon,
  account_id,
  client_id,
  client_secret,
  scopes,
  auth_url,
  token_url,
  user_info_url,
  email_key,
  user_schema,
  user_mapping
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9,
  $10,
  $11,
  $12,
  $13
) RETURNING id, name, provider, icon, account_id, client_id, client_secret, scopes, auth_url, token_url, user_info_url, email_key, user_schema, user_mapping, created_at, updated_at
`

type CreateExternalAuthProviderParams struct {
	Name         string
	Provider     string
	Icon         string
	AccountID    int32
	ClientID     string
	ClientSecret string
	Scopes       []string
	AuthUrl      string
	TokenUrl     string
	UserInfoUrl  string
	EmailKey     string
	UserSchema   []byte
	UserMapping  []byte
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateExternalAuthProvider(ctx context.Context, arg CreateExternalAuthProviderParams) (ExternalAuthProvider, error) {
	row := q.db.QueryRow(ctx, createExternalAuthProvider,
		arg.Name,
		arg.Provider,
		arg.Icon,
		arg.AccountID,
		arg.ClientID,
		arg.ClientSecret,
		arg.Scopes,
		arg.AuthUrl,
		arg.TokenUrl,
		arg.UserInfoUrl,
		arg.EmailKey,
		arg.UserSchema,
		arg.UserMapping,
	)
	var i ExternalAuthProvider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Provider,
		&i.Icon,
		&i.AccountID,
		&i.ClientID,
		&i.ClientSecret,
		&i.Scopes,
		&i.AuthUrl,
		&i.TokenUrl,
		&i.UserInfoUrl,
		&i.EmailKey,
		&i.UserSchema,
		&i.UserMapping,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findExternalAuthProviderByID = `-- name: FindExternalAuthProviderByID :one
SELECT id, name, provider, icon, account_id, client_id, client_secret, scopes, auth_url, token_url, user_info_url, email_key, user_schema, user_mapping, created_at, updated_at FROM "external_auth_providers"
WHERE id = $1 LIMIT 1
`

func (q *Queries) FindExternalAuthProviderByID(ctx context.Context, id int32) (ExternalAuthProvider, error) {
	row := q.db.QueryRow(ctx, findExternalAuthProviderByID, id)
	var i ExternalAuthProvider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Provider,
		&i.Icon,
		&i.AccountID,
		&i.ClientID,
		&i.ClientSecret,
		&i.Scopes,
		&i.AuthUrl,
		&i.TokenUrl,
		&i.UserInfoUrl,
		&i.EmailKey,
		&i.UserSchema,
		&i.UserMapping,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findExternalAuthProviderByProviderAndAccountID = `-- name: FindExternalAuthProviderByProviderAndAccountID :one
SELECT id, name, provider, icon, account_id, client_id, client_secret, scopes, auth_url, token_url, user_info_url, email_key, user_schema, user_mapping, created_at, updated_at FROM "external_auth_providers"
WHERE
  provider = $1 AND
  account_id = $2
LIMIT 1
`

type FindExternalAuthProviderByProviderAndAccountIDParams struct {
	Provider  string
	AccountID int32
}

func (q *Queries) FindExternalAuthProviderByProviderAndAccountID(ctx context.Context, arg FindExternalAuthProviderByProviderAndAccountIDParams) (ExternalAuthProvider, error) {
	row := q.db.QueryRow(ctx, findExternalAuthProviderByProviderAndAccountID, arg.Provider, arg.AccountID)
	var i ExternalAuthProvider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Provider,
		&i.Icon,
		&i.AccountID,
		&i.ClientID,
		&i.ClientSecret,
		&i.Scopes,
		&i.AuthUrl,
		&i.TokenUrl,
		&i.UserInfoUrl,
		&i.EmailKey,
		&i.UserSchema,
		&i.UserMapping,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
