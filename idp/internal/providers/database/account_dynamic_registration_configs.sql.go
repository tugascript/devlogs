// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account_dynamic_registration_configs.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createAccountDynamicRegistrationConfig = `-- name: CreateAccountDynamicRegistrationConfig :one

INSERT INTO "account_dynamic_registration_configs" (
    "account_id",
    "account_public_id",
    "account_credentials_types",
    "whitelisted_domains",
    "require_software_statement_credential_types",
    "software_statement_verification_methods",
    "require_initial_access_token_credential_types",
    "initial_access_token_generation_methods"
) VALUES (
    $1, 
    $2, 
    $3, 
    $4, 
    $5, 
    $6, 
    $7,
    $8
) RETURNING id, account_id, account_public_id, account_credentials_types, whitelisted_domains, require_software_statement_credential_types, software_statement_verification_methods, require_initial_access_token_credential_types, initial_access_token_generation_methods, created_at, updated_at
`

type CreateAccountDynamicRegistrationConfigParams struct {
	AccountID                                int32
	AccountPublicID                          uuid.UUID
	AccountCredentialsTypes                  []AccountCredentialsType
	WhitelistedDomains                       []string
	RequireSoftwareStatementCredentialTypes  []AccountCredentialsType
	SoftwareStatementVerificationMethods     []SoftwareStatementVerificationMethod
	RequireInitialAccessTokenCredentialTypes []AccountCredentialsType
	InitialAccessTokenGenerationMethods      []InitialAccessTokenGenerationMethod
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateAccountDynamicRegistrationConfig(ctx context.Context, arg CreateAccountDynamicRegistrationConfigParams) (AccountDynamicRegistrationConfig, error) {
	row := q.db.QueryRow(ctx, createAccountDynamicRegistrationConfig,
		arg.AccountID,
		arg.AccountPublicID,
		arg.AccountCredentialsTypes,
		arg.WhitelistedDomains,
		arg.RequireSoftwareStatementCredentialTypes,
		arg.SoftwareStatementVerificationMethods,
		arg.RequireInitialAccessTokenCredentialTypes,
		arg.InitialAccessTokenGenerationMethods,
	)
	var i AccountDynamicRegistrationConfig
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountPublicID,
		&i.AccountCredentialsTypes,
		&i.WhitelistedDomains,
		&i.RequireSoftwareStatementCredentialTypes,
		&i.SoftwareStatementVerificationMethods,
		&i.RequireInitialAccessTokenCredentialTypes,
		&i.InitialAccessTokenGenerationMethods,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccountDynamicRegistrationConfig = `-- name: DeleteAccountDynamicRegistrationConfig :exec
DELETE FROM "account_dynamic_registration_configs" WHERE "id" = $1
`

func (q *Queries) DeleteAccountDynamicRegistrationConfig(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAccountDynamicRegistrationConfig, id)
	return err
}

const findAccountDynamicRegistrationConfigByAccountID = `-- name: FindAccountDynamicRegistrationConfigByAccountID :one
SELECT id, account_id, account_public_id, account_credentials_types, whitelisted_domains, require_software_statement_credential_types, software_statement_verification_methods, require_initial_access_token_credential_types, initial_access_token_generation_methods, created_at, updated_at FROM "account_dynamic_registration_configs" 
WHERE "account_id" = $1 LIMIT 1
`

func (q *Queries) FindAccountDynamicRegistrationConfigByAccountID(ctx context.Context, accountID int32) (AccountDynamicRegistrationConfig, error) {
	row := q.db.QueryRow(ctx, findAccountDynamicRegistrationConfigByAccountID, accountID)
	var i AccountDynamicRegistrationConfig
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountPublicID,
		&i.AccountCredentialsTypes,
		&i.WhitelistedDomains,
		&i.RequireSoftwareStatementCredentialTypes,
		&i.SoftwareStatementVerificationMethods,
		&i.RequireInitialAccessTokenCredentialTypes,
		&i.InitialAccessTokenGenerationMethods,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAccountDynamicRegistrationConfigByAccountPublicID = `-- name: FindAccountDynamicRegistrationConfigByAccountPublicID :one
SELECT id, account_id, account_public_id, account_credentials_types, whitelisted_domains, require_software_statement_credential_types, software_statement_verification_methods, require_initial_access_token_credential_types, initial_access_token_generation_methods, created_at, updated_at FROM "account_dynamic_registration_configs"
WHERE "account_public_id" = $1 LIMIT 1
`

func (q *Queries) FindAccountDynamicRegistrationConfigByAccountPublicID(ctx context.Context, accountPublicID uuid.UUID) (AccountDynamicRegistrationConfig, error) {
	row := q.db.QueryRow(ctx, findAccountDynamicRegistrationConfigByAccountPublicID, accountPublicID)
	var i AccountDynamicRegistrationConfig
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountPublicID,
		&i.AccountCredentialsTypes,
		&i.WhitelistedDomains,
		&i.RequireSoftwareStatementCredentialTypes,
		&i.SoftwareStatementVerificationMethods,
		&i.RequireInitialAccessTokenCredentialTypes,
		&i.InitialAccessTokenGenerationMethods,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAccountDynamicRegistrationConfig = `-- name: UpdateAccountDynamicRegistrationConfig :one
UPDATE "account_dynamic_registration_configs" SET
    "account_credentials_types" = $2,
    "whitelisted_domains" = $3,
    "require_software_statement_credential_types" = $4,
    "software_statement_verification_methods" = $5,
    "require_initial_access_token_credential_types" = $6,
    "initial_access_token_generation_methods" = $7
WHERE "id" = $1 
RETURNING id, account_id, account_public_id, account_credentials_types, whitelisted_domains, require_software_statement_credential_types, software_statement_verification_methods, require_initial_access_token_credential_types, initial_access_token_generation_methods, created_at, updated_at
`

type UpdateAccountDynamicRegistrationConfigParams struct {
	ID                                       int32
	AccountCredentialsTypes                  []AccountCredentialsType
	WhitelistedDomains                       []string
	RequireSoftwareStatementCredentialTypes  []AccountCredentialsType
	SoftwareStatementVerificationMethods     []SoftwareStatementVerificationMethod
	RequireInitialAccessTokenCredentialTypes []AccountCredentialsType
	InitialAccessTokenGenerationMethods      []InitialAccessTokenGenerationMethod
}

func (q *Queries) UpdateAccountDynamicRegistrationConfig(ctx context.Context, arg UpdateAccountDynamicRegistrationConfigParams) (AccountDynamicRegistrationConfig, error) {
	row := q.db.QueryRow(ctx, updateAccountDynamicRegistrationConfig,
		arg.ID,
		arg.AccountCredentialsTypes,
		arg.WhitelistedDomains,
		arg.RequireSoftwareStatementCredentialTypes,
		arg.SoftwareStatementVerificationMethods,
		arg.RequireInitialAccessTokenCredentialTypes,
		arg.InitialAccessTokenGenerationMethods,
	)
	var i AccountDynamicRegistrationConfig
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountPublicID,
		&i.AccountCredentialsTypes,
		&i.WhitelistedDomains,
		&i.RequireSoftwareStatementCredentialTypes,
		&i.SoftwareStatementVerificationMethods,
		&i.RequireInitialAccessTokenCredentialTypes,
		&i.InitialAccessTokenGenerationMethods,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
