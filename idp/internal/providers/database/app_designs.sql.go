// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: app_designs.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countAppDesignsByAppID = `-- name: CountAppDesignsByAppID :one
SELECT COUNT(*) FROM "app_designs" WHERE "app_id" = $1
LIMIT 1
`

func (q *Queries) CountAppDesignsByAppID(ctx context.Context, appID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countAppDesignsByAppID, appID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAppDesign = `-- name: CreateAppDesign :one

INSERT INTO "app_designs" (
    "account_id",
    "app_id",
    "light_colors",
    "dark_colors",
    "logo_url",
    "favicon_url"
) VALUES (
    $1, 
    $2, 
    $3, 
    $4, 
    $5, 
    $6
) RETURNING id, account_id, app_id, light_colors, dark_colors, logo_url, favicon_url, created_at, updated_at
`

type CreateAppDesignParams struct {
	AccountID   int32
	AppID       int32
	LightColors []byte
	DarkColors  []byte
	LogoUrl     pgtype.Text
	FaviconUrl  pgtype.Text
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateAppDesign(ctx context.Context, arg CreateAppDesignParams) (AppDesign, error) {
	row := q.db.QueryRow(ctx, createAppDesign,
		arg.AccountID,
		arg.AppID,
		arg.LightColors,
		arg.DarkColors,
		arg.LogoUrl,
		arg.FaviconUrl,
	)
	var i AppDesign
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AppID,
		&i.LightColors,
		&i.DarkColors,
		&i.LogoUrl,
		&i.FaviconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllAppDesigns = `-- name: DeleteAllAppDesigns :exec
DELETE FROM "app_designs"
`

func (q *Queries) DeleteAllAppDesigns(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllAppDesigns)
	return err
}

const deleteAppDesign = `-- name: DeleteAppDesign :exec
DELETE FROM "app_designs" WHERE "id" = $1
`

func (q *Queries) DeleteAppDesign(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAppDesign, id)
	return err
}

const findAppDesignByAppID = `-- name: FindAppDesignByAppID :one
SELECT id, account_id, app_id, light_colors, dark_colors, logo_url, favicon_url, created_at, updated_at FROM "app_designs" WHERE "app_id" = $1
LIMIT 1
`

func (q *Queries) FindAppDesignByAppID(ctx context.Context, appID int32) (AppDesign, error) {
	row := q.db.QueryRow(ctx, findAppDesignByAppID, appID)
	var i AppDesign
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AppID,
		&i.LightColors,
		&i.DarkColors,
		&i.LogoUrl,
		&i.FaviconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAppDesign = `-- name: UpdateAppDesign :one
UPDATE "app_designs" SET
    "light_colors" = $1,
    "dark_colors" = $2,
    "logo_url" = $3,
    "favicon_url" = $4
WHERE "id" = $5
RETURNING id, account_id, app_id, light_colors, dark_colors, logo_url, favicon_url, created_at, updated_at
`

type UpdateAppDesignParams struct {
	LightColors []byte
	DarkColors  []byte
	LogoUrl     pgtype.Text
	FaviconUrl  pgtype.Text
	ID          int32
}

func (q *Queries) UpdateAppDesign(ctx context.Context, arg UpdateAppDesignParams) (AppDesign, error) {
	row := q.db.QueryRow(ctx, updateAppDesign,
		arg.LightColors,
		arg.DarkColors,
		arg.LogoUrl,
		arg.FaviconUrl,
		arg.ID,
	)
	var i AppDesign
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AppID,
		&i.LightColors,
		&i.DarkColors,
		&i.LogoUrl,
		&i.FaviconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
