// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const confirmUser = `-- name: ConfirmUser :one
UPDATE "users" SET
    "is_confirmed" = true,
    "version" = "version" + 1,
    "updated_at" = now()
WHERE "id" = $1
RETURNING id, public_id, account_id, email, username, password, version, email_verified, user_roles, is_active, two_factor_type, user_data, created_at, updated_at
`

func (q *Queries) ConfirmUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, confirmUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.AccountID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Version,
		&i.EmailVerified,
		&i.UserRoles,
		&i.IsActive,
		&i.TwoFactorType,
		&i.UserData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const countFilteredUsersByEmailOrUsernameAndByAccountID = `-- name: CountFilteredUsersByEmailOrUsernameAndByAccountID :one
SELECT COUNT("id") FROM "users"
WHERE "account_id" = $1 AND ("email" ILIKE $2 OR "username" ILIKE $3)
LIMIT 1
`

type CountFilteredUsersByEmailOrUsernameAndByAccountIDParams struct {
	AccountID int32
	Email     string
	Username  string
}

func (q *Queries) CountFilteredUsersByEmailOrUsernameAndByAccountID(ctx context.Context, arg CountFilteredUsersByEmailOrUsernameAndByAccountIDParams) (int64, error) {
	row := q.db.QueryRow(ctx, countFilteredUsersByEmailOrUsernameAndByAccountID, arg.AccountID, arg.Email, arg.Username)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUsersByAccountID = `-- name: CountUsersByAccountID :one
SELECT COUNT("id") FROM "users"
WHERE "account_id" = $1
LIMIT 1
`

func (q *Queries) CountUsersByAccountID(ctx context.Context, accountID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countUsersByAccountID, accountID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUsersByEmailAndAccountID = `-- name: CountUsersByEmailAndAccountID :one
SELECT COUNT("id") FROM "users"
WHERE "email" = $1 AND "account_id" = $2
LIMIT 1
`

type CountUsersByEmailAndAccountIDParams struct {
	Email     string
	AccountID int32
}

func (q *Queries) CountUsersByEmailAndAccountID(ctx context.Context, arg CountUsersByEmailAndAccountIDParams) (int64, error) {
	row := q.db.QueryRow(ctx, countUsersByEmailAndAccountID, arg.Email, arg.AccountID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUsersByUsernameAndAccountID = `-- name: CountUsersByUsernameAndAccountID :one
SELECT COUNT("id") FROM "users"
WHERE "username" = $1 AND "account_id" = $2
LIMIT 1
`

type CountUsersByUsernameAndAccountIDParams struct {
	Username  string
	AccountID int32
}

func (q *Queries) CountUsersByUsernameAndAccountID(ctx context.Context, arg CountUsersByUsernameAndAccountIDParams) (int64, error) {
	row := q.db.QueryRow(ctx, countUsersByUsernameAndAccountID, arg.Username, arg.AccountID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUserWithPassword = `-- name: CreateUserWithPassword :one

INSERT INTO "users" (
    "account_id",
    "public_id",
    "email",
    "username",
    "password",
    "user_data"
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
) RETURNING id, public_id, account_id, email, username, password, version, email_verified, user_roles, is_active, two_factor_type, user_data, created_at, updated_at
`

type CreateUserWithPasswordParams struct {
	AccountID int32
	PublicID  uuid.UUID
	Email     string
	Username  string
	Password  pgtype.Text
	UserData  []byte
}

// Copyright (c) 2025 Afonso Barracha
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
func (q *Queries) CreateUserWithPassword(ctx context.Context, arg CreateUserWithPasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, createUserWithPassword,
		arg.AccountID,
		arg.PublicID,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.UserData,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.AccountID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Version,
		&i.EmailVerified,
		&i.UserRoles,
		&i.IsActive,
		&i.TwoFactorType,
		&i.UserData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserWithoutPassword = `-- name: CreateUserWithoutPassword :one
INSERT INTO "users" (
    "account_id",
    "public_id",
    "email",
    "username",
    "user_data"
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING id, public_id, account_id, email, username, password, version, email_verified, user_roles, is_active, two_factor_type, user_data, created_at, updated_at
`

type CreateUserWithoutPasswordParams struct {
	AccountID int32
	PublicID  uuid.UUID
	Email     string
	Username  string
	UserData  []byte
}

func (q *Queries) CreateUserWithoutPassword(ctx context.Context, arg CreateUserWithoutPasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, createUserWithoutPassword,
		arg.AccountID,
		arg.PublicID,
		arg.Email,
		arg.Username,
		arg.UserData,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.AccountID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Version,
		&i.EmailVerified,
		&i.UserRoles,
		&i.IsActive,
		&i.TwoFactorType,
		&i.UserData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "users"
WHERE "id" = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const filterUsersByEmailOrUsernameAndByAccountIDOrderedByEmail = `-- name: FilterUsersByEmailOrUsernameAndByAccountIDOrderedByEmail :many
SELECT id, public_id, account_id, email, username, password, version, email_verified, user_roles, is_active, two_factor_type, user_data, created_at, updated_at FROM "users"
WHERE "account_id" = $1 AND ("email" ILIKE $2 OR "username" ILIKE $3)
ORDER BY "email" ASC
OFFSET $4 LIMIT $5
`

type FilterUsersByEmailOrUsernameAndByAccountIDOrderedByEmailParams struct {
	AccountID int32
	Email     string
	Username  string
	Offset    int32
	Limit     int32
}

func (q *Queries) FilterUsersByEmailOrUsernameAndByAccountIDOrderedByEmail(ctx context.Context, arg FilterUsersByEmailOrUsernameAndByAccountIDOrderedByEmailParams) ([]User, error) {
	rows, err := q.db.Query(ctx, filterUsersByEmailOrUsernameAndByAccountIDOrderedByEmail,
		arg.AccountID,
		arg.Email,
		arg.Username,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.AccountID,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.Version,
			&i.EmailVerified,
			&i.UserRoles,
			&i.IsActive,
			&i.TwoFactorType,
			&i.UserData,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filterUsersByEmailOrUsernameAndByAccountIDOrderedByID = `-- name: FilterUsersByEmailOrUsernameAndByAccountIDOrderedByID :many
SELECT id, public_id, account_id, email, username, password, version, email_verified, user_roles, is_active, two_factor_type, user_data, created_at, updated_at FROM "users"
WHERE "account_id" = $1 AND ("email" ILIKE $2 OR "username" ILIKE $3)
ORDER BY "id" DESC
OFFSET $4 LIMIT $5
`

type FilterUsersByEmailOrUsernameAndByAccountIDOrderedByIDParams struct {
	AccountID int32
	Email     string
	Username  string
	Offset    int32
	Limit     int32
}

func (q *Queries) FilterUsersByEmailOrUsernameAndByAccountIDOrderedByID(ctx context.Context, arg FilterUsersByEmailOrUsernameAndByAccountIDOrderedByIDParams) ([]User, error) {
	rows, err := q.db.Query(ctx, filterUsersByEmailOrUsernameAndByAccountIDOrderedByID,
		arg.AccountID,
		arg.Email,
		arg.Username,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.AccountID,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.Version,
			&i.EmailVerified,
			&i.UserRoles,
			&i.IsActive,
			&i.TwoFactorType,
			&i.UserData,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filterUsersByEmailOrUsernameAndByAccountIDOrderedByUsername = `-- name: FilterUsersByEmailOrUsernameAndByAccountIDOrderedByUsername :many
SELECT id, public_id, account_id, email, username, password, version, email_verified, user_roles, is_active, two_factor_type, user_data, created_at, updated_at FROM "users"
WHERE "account_id" = $1 AND ("email" ILIKE $2 OR "username" ILIKE $3)
ORDER BY "username" ASC
OFFSET $4 LIMIT $5
`

type FilterUsersByEmailOrUsernameAndByAccountIDOrderedByUsernameParams struct {
	AccountID int32
	Email     string
	Username  string
	Offset    int32
	Limit     int32
}

func (q *Queries) FilterUsersByEmailOrUsernameAndByAccountIDOrderedByUsername(ctx context.Context, arg FilterUsersByEmailOrUsernameAndByAccountIDOrderedByUsernameParams) ([]User, error) {
	rows, err := q.db.Query(ctx, filterUsersByEmailOrUsernameAndByAccountIDOrderedByUsername,
		arg.AccountID,
		arg.Email,
		arg.Username,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.AccountID,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.Version,
			&i.EmailVerified,
			&i.UserRoles,
			&i.IsActive,
			&i.TwoFactorType,
			&i.UserData,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPaginatedUsersByAccountIDOrderedByEmail = `-- name: FindPaginatedUsersByAccountIDOrderedByEmail :many
SELECT id, public_id, account_id, email, username, password, version, email_verified, user_roles, is_active, two_factor_type, user_data, created_at, updated_at FROM "users"
WHERE "account_id" = $1
ORDER BY "email" ASC
OFFSET $2 LIMIT $3
`

type FindPaginatedUsersByAccountIDOrderedByEmailParams struct {
	AccountID int32
	Offset    int32
	Limit     int32
}

func (q *Queries) FindPaginatedUsersByAccountIDOrderedByEmail(ctx context.Context, arg FindPaginatedUsersByAccountIDOrderedByEmailParams) ([]User, error) {
	rows, err := q.db.Query(ctx, findPaginatedUsersByAccountIDOrderedByEmail, arg.AccountID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.AccountID,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.Version,
			&i.EmailVerified,
			&i.UserRoles,
			&i.IsActive,
			&i.TwoFactorType,
			&i.UserData,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPaginatedUsersByAccountIDOrderedByID = `-- name: FindPaginatedUsersByAccountIDOrderedByID :many
SELECT id, public_id, account_id, email, username, password, version, email_verified, user_roles, is_active, two_factor_type, user_data, created_at, updated_at FROM "users"
WHERE "account_id" = $1
ORDER BY "id" DESC
OFFSET $2 LIMIT $3
`

type FindPaginatedUsersByAccountIDOrderedByIDParams struct {
	AccountID int32
	Offset    int32
	Limit     int32
}

func (q *Queries) FindPaginatedUsersByAccountIDOrderedByID(ctx context.Context, arg FindPaginatedUsersByAccountIDOrderedByIDParams) ([]User, error) {
	rows, err := q.db.Query(ctx, findPaginatedUsersByAccountIDOrderedByID, arg.AccountID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.AccountID,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.Version,
			&i.EmailVerified,
			&i.UserRoles,
			&i.IsActive,
			&i.TwoFactorType,
			&i.UserData,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPaginatedUsersByAccountIDOrderedByUsername = `-- name: FindPaginatedUsersByAccountIDOrderedByUsername :many
SELECT id, public_id, account_id, email, username, password, version, email_verified, user_roles, is_active, two_factor_type, user_data, created_at, updated_at FROM "users"
WHERE "account_id" = $1
ORDER BY "username" ASC
OFFSET $2 LIMIT $3
`

type FindPaginatedUsersByAccountIDOrderedByUsernameParams struct {
	AccountID int32
	Offset    int32
	Limit     int32
}

func (q *Queries) FindPaginatedUsersByAccountIDOrderedByUsername(ctx context.Context, arg FindPaginatedUsersByAccountIDOrderedByUsernameParams) ([]User, error) {
	rows, err := q.db.Query(ctx, findPaginatedUsersByAccountIDOrderedByUsername, arg.AccountID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.AccountID,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.Version,
			&i.EmailVerified,
			&i.UserRoles,
			&i.IsActive,
			&i.TwoFactorType,
			&i.UserData,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserByEmailAndAccountID = `-- name: FindUserByEmailAndAccountID :one
SELECT id, public_id, account_id, email, username, password, version, email_verified, user_roles, is_active, two_factor_type, user_data, created_at, updated_at FROM "users"
WHERE "email" = $1 AND "account_id" = $2
LIMIT 1
`

type FindUserByEmailAndAccountIDParams struct {
	Email     string
	AccountID int32
}

func (q *Queries) FindUserByEmailAndAccountID(ctx context.Context, arg FindUserByEmailAndAccountIDParams) (User, error) {
	row := q.db.QueryRow(ctx, findUserByEmailAndAccountID, arg.Email, arg.AccountID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.AccountID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Version,
		&i.EmailVerified,
		&i.UserRoles,
		&i.IsActive,
		&i.TwoFactorType,
		&i.UserData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByID = `-- name: FindUserByID :one
SELECT id, public_id, account_id, email, username, password, version, email_verified, user_roles, is_active, two_factor_type, user_data, created_at, updated_at FROM "users"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) FindUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, findUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.AccountID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Version,
		&i.EmailVerified,
		&i.UserRoles,
		&i.IsActive,
		&i.TwoFactorType,
		&i.UserData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByPublicIDAndVersion = `-- name: FindUserByPublicIDAndVersion :one
SELECT id, public_id, account_id, email, username, password, version, email_verified, user_roles, is_active, two_factor_type, user_data, created_at, updated_at FROM "users"
WHERE "public_id" = $1 AND "version" = $2 LIMIT 1
`

type FindUserByPublicIDAndVersionParams struct {
	PublicID uuid.UUID
	Version  int32
}

func (q *Queries) FindUserByPublicIDAndVersion(ctx context.Context, arg FindUserByPublicIDAndVersionParams) (User, error) {
	row := q.db.QueryRow(ctx, findUserByPublicIDAndVersion, arg.PublicID, arg.Version)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.AccountID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Version,
		&i.EmailVerified,
		&i.UserRoles,
		&i.IsActive,
		&i.TwoFactorType,
		&i.UserData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByUsernameAndAccountID = `-- name: FindUserByUsernameAndAccountID :one
SELECT id, public_id, account_id, email, username, password, version, email_verified, user_roles, is_active, two_factor_type, user_data, created_at, updated_at FROM "users"
WHERE "username" = $1 AND "account_id" = $2
LIMIT 1
`

type FindUserByUsernameAndAccountIDParams struct {
	Username  string
	AccountID int32
}

func (q *Queries) FindUserByUsernameAndAccountID(ctx context.Context, arg FindUserByUsernameAndAccountIDParams) (User, error) {
	row := q.db.QueryRow(ctx, findUserByUsernameAndAccountID, arg.Username, arg.AccountID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.AccountID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Version,
		&i.EmailVerified,
		&i.UserRoles,
		&i.IsActive,
		&i.TwoFactorType,
		&i.UserData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE "users" SET
    "email" = $1,
    "username" = $2,
    "user_data" = $3,
    "is_active" = $4,
    "email_verified" = $5,
    "version" = "version" + 1,
    "updated_at" = now()
WHERE "id" = $6
RETURNING id, public_id, account_id, email, username, password, version, email_verified, user_roles, is_active, two_factor_type, user_data, created_at, updated_at
`

type UpdateUserParams struct {
	Email         string
	Username      string
	UserData      []byte
	IsActive      bool
	EmailVerified bool
	ID            int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Email,
		arg.Username,
		arg.UserData,
		arg.IsActive,
		arg.EmailVerified,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.AccountID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Version,
		&i.EmailVerified,
		&i.UserRoles,
		&i.IsActive,
		&i.TwoFactorType,
		&i.UserData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE "users" SET
    "password" = $1,
    "version" = "version" + 1,
    "updated_at" = now()
WHERE "id" = $2
RETURNING id, public_id, account_id, email, username, password, version, email_verified, user_roles, is_active, two_factor_type, user_data, created_at, updated_at
`

type UpdateUserPasswordParams struct {
	Password pgtype.Text
	ID       int32
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserPassword, arg.Password, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.AccountID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Version,
		&i.EmailVerified,
		&i.UserRoles,
		&i.IsActive,
		&i.TwoFactorType,
		&i.UserData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
