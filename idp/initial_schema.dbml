Table accounts as A {
    id serial [pk]
    first_name varchar(50) [not null]
    last_name varchar(50) [not null]
    username varchar(63) [not null]
    email varchar(250) [not null]
    dek text [not null]
    password text
    version integer [not null, default: 1]
    is_confirmed boolean [not null, default: false]

    two_factor_type varchar(5) [not null, default: 'none']

    created_at timestamp [not null, default: `now()`]
    updated_at timestamp [not null, default: `now()`]

    Indexes {
        (email) [unique, name: 'accounts_email_uidx']
        (username) [unique, name: 'accounts_username_uidx']
    }
}

Table account_totps as AT {
    id serial [pk]
    
    account_id integer [not null]
    url varchar(250) [not null]
    secret text [not null]
    recovery_codes jsonb [not null]

    created_at timestamp [not null, default: `now()`]
    updated_at timestamp [not null, default: `now()`]

    Indexes {
        (account_id) [unique, name: 'accounts_totps_account_id_uidx']
    }
}
Ref: AT.account_id > A.id [delete: cascade]

Table account_credentials as ACK {
    id serial [pk]

    account_id integer [not null]

    scopes jsonb [not null]

    alias varchar(50) [not null]
    client_id varchar(22) [not null]
    client_secret text [not null]

    created_at timestamp [not null, default: `now()`]
    updated_at timestamp [not null, default: `now()`]

    Indexes {
        (client_id) [unique, name: 'account_credentials_client_id_uidx']
        (account_id) [name: 'account_credentials_account_id_idx']
        (alias, account_id) [unique, name: 'account_credentials_alias_account_id_uidx']
    }
}
Ref: ACK.account_id > A.id [delete: cascade]

Table auth_providers as AP {
    id serial [pk]
    
    email varchar(250) [not null]
    provider varchar(10) [not null]

    created_at timestamp [not null, default: `now()`]
    updated_at timestamp [not null, default: `now()`]

    Indexes {
        email [name: 'auth_providers_email_idx']
        (email, provider) [unique, name: 'auth_providers_email_provider_uidx']
    }
}
Ref: AP.email > A.email [delete: cascade, update: cascade]

Table external_auth_providers as SAP {
    id serial [pk]

    name varchar(50) [not null]
    provider varchar(50) [not null]
    icon varchar(50) [not null]
    account_id integer [not null]

    client_id text [not null]
    client_secret text [not null]
    scopes "varchar(250)[]" [not null]
    auth_url text [not null]
    token_url text [not null]
    user_info_url text [not null]
    user_schema jsonb [not null]

    created_at timestamp [not null, default: `now()`]
    updated_at timestamp [not null, default: `now()`]

    Indexes {
        (account_id, provider) [unique, name: 'external_auth_providers_account_id_provider_uidx']
        (name) [name: 'external_auth_providers_name_idx']
        (account_id) [name: 'external_auth_providers_account_id_idx']
    }
}
Ref: SAP.account_id > A.id [delete: cascade]

Table user_schemas as US {
    id serial [pk]

    account_id integer [not null]

    schema_data jsonb [not null, default: '{ "first_name": { "type": "string", "unique": false, "required": true, "validate": "required,min=2,max=50" }, "last_name": { "type": "string", "unique": false, "required": true, "validate": "required,min=2,max=50" } }']

    created_at timestamp [not null, default: `now()`]
    updated_at timestamp [not null, default: `now()`]

    Indexes {
        (account_id) [unique, name: 'user_schemas_account_id_uidx']
    }
}
Ref: US.account_id > A.id [delete: cascade]

Table users as U {
    id serial [pk]

    account_id integer [not null]

    email varchar(250) [not null]
    username varchar(100) [not null]
    password text
    dek text [not null]
    version integer [not null, default: 1]
    is_confirmed boolean [not null, default: false]
    two_factor_type varchar(5) [not null, default: 'none']

    user_data jsonb [not null, default: '{}']

    created_at timestamp [not null, default: `now()`]
    updated_at timestamp [not null, default: `now()`]

    Indexes {
        (account_id, email) [unique, name: 'users_account_id_email_uidx']
        (account_id, username) [unique, name: 'users_account_id_username_uidx']
        (account_id) [name: 'users_account_id_idx']
    }
}
Ref: U.account_id > A.id [delete: cascade]

Table user_totps as UT {
    id serial [pk]

    user_id integer [not null]
    url varchar(250) [not null]
    secret text [not null]
    recovery_codes jsonb [not null]

    created_at timestamp [not null, default: `now()`]
    updated_at timestamp [not null, default: `now()`]

    Indexes {
        (user_id) [unique, name: 'user_totps_user_id_uidx']
    }
}
Ref: UT.user_id > U.id [delete: cascade]

Table user_auth_providers as UAP {
    id serial [pk]

    user_id integer [not null]
    account_id integer [not null]

    provider varchar(50) [not null]

    created_at timestamp [not null, default: `now()`]
    updated_at timestamp [not null, default: `now()`]

    Indexes {
        user_id [name: 'user_auth_provider_user_id_idx']
        (user_id, provider) [unique, name: 'user_auth_provider_user_id_provider_uidx']
        (account_id) [name: 'user_auth_provider_account_id_idx']
    }
}
Ref: UAP.account_id > A.id [delete: cascade]
Ref: UAP.user_id > U.id [delete: cascade]

Table user_credentials as UC {
    id serial [pk]

    user_id integer [not null]

    client_id varchar(22) [not null]
    client_secret text [not null]

    account_id integer [not null]

    created_at timestamp [not null, default: `now()`]
    updated_at timestamp [not null, default: `now()`]

    Indexes {
        (client_id) [unique, name: 'user_credentials_client_id_uidx']
        (user_id) [unique, name: 'user_credentials_user_id_uidx']
        (account_id) [name: 'user_credentials_account_id_idx']
    }
}
Ref: UC.user_id > U.id [delete: cascade]
Ref: UC.account_id > A.id [delete: cascade]

Table apps as APP {
    id serial [pk]

    account_id integer [not null]

    type varchar(10) [not null]
    name varchar(50) [not null]
    client_id varchar(22) [not null]
    client_secret text [not null]
    dek text [not null]

    callback_uris "varchar(250)[]" [not null, default: '{}']
    logout_uris "varchar(250)[]" [not null, default: '{}']

    user_scopes jsonb [not null, default: '{ "email": true, "openid": true, "profile": true, "read:app_profile": true }']
    app_providers jsonb [not null, default: '{ "username_password": true }']
    username_column varchar(8) [not null, default: 'email']
    profile_schema jsonb [not null, default: '{}']

    id_token_ttl integer [not null, default: 3600]

    jwt_crypto_suite varchar(7) [not null, default: 'ES256']

    created_at timestamp [not null, default: `now()`]
    updated_at timestamp [not null, default: `now()`]

    Indexes {
        (account_id) [name: 'apps_account_id_idx']
        (client_id) [unique, name: 'apps_client_id_uidx']
        (name) [name: 'apps_name_idx']
        (username_column) [name: 'apps_username_column_idx']
        (account_id, name) [unique, name: 'apps_account_id_name_uidx']
    }
}
Ref: APP.account_id > A.id [delete: cascade]

Table app_profiles as AUP {
    id serial [pk]

    account_id integer [not null]
    user_id integer [not null]
    app_id integer [not null]

    profile_data jsonb [not null, default: '{}']

    created_at timestamp [not null, default: `now()`]
    updated_at timestamp [not null, default: `now()`]

    Indexes {
        (account_id) [name: 'user_profiles_account_id_idx']
        (user_id) [name: 'user_profiles_user_id_idx']
        (app_id) [name: 'user_profiles_app_id_idx']
        (user_id, app_id) [unique, name: 'user_profiles_user_id_app_id_uidx']
    }
}
Ref: AUP.account_id > A.id [delete: cascade]
Ref: AUP.user_id > U.id [delete: cascade]
Ref: AUP.app_id > APP.id [delete: cascade]

Table app_keys as AK {
    id serial [pk]
    
    app_id integer [not null]
    account_id integer [not null]

    name varchar(10) [not null]
    jwt_crypto_suite varchar(5) [not null]

    public_kid varchar(20) [not null]
    public_key jsonb [not null]
    private_key text [not null]
    is_distributed boolean [not null, default: false]

    created_at timestamp [not null, default: `now()`]
    updated_at timestamp [not null, default: `now()`]

    Indexes {
        (app_id) [name: 'app_keys_app_id_idx']
        (account_id) [name: 'app_keys_account_id_idx']
        (public_kid) [unique, name: 'app_keys_public_kid_uidx']

        (name, app_id) [unique, name: 'app_keys_name_app_id_uidx']
        (is_distributed, app_id) [name: 'app_keys_is_distributed_app_id_idx']
    }
}
Ref: AK.app_id > APP.id [delete: cascade]
Ref: AK.account_id > A.id [delete: cascade]

Table blacklisted_tokens as BT {
    id uuid [pk]

    expires_at timestamp [not null]

    created_at timestamp [not null, default: `now()`]
}
